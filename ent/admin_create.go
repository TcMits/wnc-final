// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/admin"
	"github.com/google/uuid"
)

// AdminCreate is the builder for creating a Admin entity.
type AdminCreate struct {
	config
	mutation *AdminMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ac *AdminCreate) SetCreateTime(t time.Time) *AdminCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ac *AdminCreate) SetNillableCreateTime(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the "update_time" field.
func (ac *AdminCreate) SetUpdateTime(t time.Time) *AdminCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ac *AdminCreate) SetNillableUpdateTime(t *time.Time) *AdminCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetJwtTokenKey sets the "jwt_token_key" field.
func (ac *AdminCreate) SetJwtTokenKey(s string) *AdminCreate {
	ac.mutation.SetJwtTokenKey(s)
	return ac
}

// SetNillableJwtTokenKey sets the "jwt_token_key" field if the given value is not nil.
func (ac *AdminCreate) SetNillableJwtTokenKey(s *string) *AdminCreate {
	if s != nil {
		ac.SetJwtTokenKey(*s)
	}
	return ac
}

// SetPassword sets the "password" field.
func (ac *AdminCreate) SetPassword(s string) *AdminCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ac *AdminCreate) SetNillablePassword(s *string) *AdminCreate {
	if s != nil {
		ac.SetPassword(*s)
	}
	return ac
}

// SetUsername sets the "username" field.
func (ac *AdminCreate) SetUsername(s string) *AdminCreate {
	ac.mutation.SetUsername(s)
	return ac
}

// SetFirstName sets the "first_name" field.
func (ac *AdminCreate) SetFirstName(s string) *AdminCreate {
	ac.mutation.SetFirstName(s)
	return ac
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (ac *AdminCreate) SetNillableFirstName(s *string) *AdminCreate {
	if s != nil {
		ac.SetFirstName(*s)
	}
	return ac
}

// SetLastName sets the "last_name" field.
func (ac *AdminCreate) SetLastName(s string) *AdminCreate {
	ac.mutation.SetLastName(s)
	return ac
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (ac *AdminCreate) SetNillableLastName(s *string) *AdminCreate {
	if s != nil {
		ac.SetLastName(*s)
	}
	return ac
}

// SetIsActive sets the "is_active" field.
func (ac *AdminCreate) SetIsActive(b bool) *AdminCreate {
	ac.mutation.SetIsActive(b)
	return ac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ac *AdminCreate) SetNillableIsActive(b *bool) *AdminCreate {
	if b != nil {
		ac.SetIsActive(*b)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AdminCreate) SetID(u uuid.UUID) *AdminCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AdminCreate) SetNillableID(u *uuid.UUID) *AdminCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AdminMutation object of the builder.
func (ac *AdminCreate) Mutation() *AdminMutation {
	return ac.mutation
}

// Save creates the Admin in the database.
func (ac *AdminCreate) Save(ctx context.Context) (*Admin, error) {
	var (
		err  error
		node *Admin
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Admin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AdminMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdminCreate) SaveX(ctx context.Context) *Admin {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdminCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdminCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AdminCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := admin.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := admin.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.JwtTokenKey(); !ok {
		v := admin.DefaultJwtTokenKey()
		ac.mutation.SetJwtTokenKey(v)
	}
	if _, ok := ac.mutation.FirstName(); !ok {
		v := admin.DefaultFirstName
		ac.mutation.SetFirstName(v)
	}
	if _, ok := ac.mutation.LastName(); !ok {
		v := admin.DefaultLastName
		ac.mutation.SetLastName(v)
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		v := admin.DefaultIsActive
		ac.mutation.SetIsActive(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := admin.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdminCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Admin.create_time"`)}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Admin.update_time"`)}
	}
	if v, ok := ac.mutation.Password(); ok {
		if err := admin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Admin.password": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Admin.username"`)}
	}
	if v, ok := ac.mutation.Username(); ok {
		if err := admin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Admin.username": %w`, err)}
		}
	}
	if v, ok := ac.mutation.FirstName(); ok {
		if err := admin.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Admin.first_name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.LastName(); ok {
		if err := admin.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Admin.last_name": %w`, err)}
		}
	}
	return nil
}

func (ac *AdminCreate) sqlSave(ctx context.Context) (*Admin, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AdminCreate) createSpec() (*Admin, *sqlgraph.CreateSpec) {
	var (
		_node = &Admin{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: admin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: admin.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.SetField(admin.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.SetField(admin.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.JwtTokenKey(); ok {
		_spec.SetField(admin.FieldJwtTokenKey, field.TypeString, value)
		_node.JwtTokenKey = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.Username(); ok {
		_spec.SetField(admin.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ac.mutation.FirstName(); ok {
		_spec.SetField(admin.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ac.mutation.LastName(); ok {
		_spec.SetField(admin.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ac.mutation.IsActive(); ok {
		_spec.SetField(admin.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	return _node, _spec
}

// AdminCreateBulk is the builder for creating many Admin entities in bulk.
type AdminCreateBulk struct {
	config
	builders []*AdminCreate
}

// Save creates the Admin entities in the database.
func (acb *AdminCreateBulk) Save(ctx context.Context) ([]*Admin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Admin, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdminCreateBulk) SaveX(ctx context.Context) []*Admin {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdminCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdminCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
