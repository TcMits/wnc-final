// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/customer"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
)

// BankAccount is the model entity for the BankAccount schema.
type BankAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID uuid.UUID `json:"customer_id,omitempty"`
	// CashIn holds the value of the "cash_in" field.
	CashIn float64 `json:"cash_in,omitempty"`
	// CashOut holds the value of the "cash_out" field.
	CashOut float64 `json:"cash_out,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// IsForPayment holds the value of the "is_for_payment" field.
	IsForPayment bool `json:"is_for_payment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankAccountQuery when eager-loading is set.
	Edges BankAccountEdges `json:"edges"`
}

// BankAccountEdges holds the relations/edges for other nodes in the graph.
type BankAccountEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// SentTransaction holds the value of the sent_transaction edge.
	SentTransaction []*Transaction `json:"sent_transaction,omitempty"`
	// ReceivedTransaction holds the value of the received_transaction edge.
	ReceivedTransaction []*Transaction `json:"received_transaction,omitempty"`
	// OwnedDebts holds the value of the owned_debts edge.
	OwnedDebts []*Debt `json:"owned_debts,omitempty"`
	// ReceivedDebts holds the value of the received_debts edge.
	ReceivedDebts []*Debt `json:"received_debts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BankAccountEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// SentTransactionOrErr returns the SentTransaction value or an error if the edge
// was not loaded in eager-loading.
func (e BankAccountEdges) SentTransactionOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.SentTransaction, nil
	}
	return nil, &NotLoadedError{edge: "sent_transaction"}
}

// ReceivedTransactionOrErr returns the ReceivedTransaction value or an error if the edge
// was not loaded in eager-loading.
func (e BankAccountEdges) ReceivedTransactionOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.ReceivedTransaction, nil
	}
	return nil, &NotLoadedError{edge: "received_transaction"}
}

// OwnedDebtsOrErr returns the OwnedDebts value or an error if the edge
// was not loaded in eager-loading.
func (e BankAccountEdges) OwnedDebtsOrErr() ([]*Debt, error) {
	if e.loadedTypes[3] {
		return e.OwnedDebts, nil
	}
	return nil, &NotLoadedError{edge: "owned_debts"}
}

// ReceivedDebtsOrErr returns the ReceivedDebts value or an error if the edge
// was not loaded in eager-loading.
func (e BankAccountEdges) ReceivedDebtsOrErr() ([]*Debt, error) {
	if e.loadedTypes[4] {
		return e.ReceivedDebts, nil
	}
	return nil, &NotLoadedError{edge: "received_debts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BankAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldIsForPayment:
			values[i] = new(sql.NullBool)
		case bankaccount.FieldCashIn, bankaccount.FieldCashOut:
			values[i] = new(sql.NullFloat64)
		case bankaccount.FieldAccountNumber:
			values[i] = new(sql.NullString)
		case bankaccount.FieldCreateTime, bankaccount.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case bankaccount.FieldID, bankaccount.FieldCustomerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BankAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BankAccount fields.
func (ba *BankAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bankaccount.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ba.ID = *value
			}
		case bankaccount.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ba.CreateTime = value.Time
			}
		case bankaccount.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ba.UpdateTime = value.Time
			}
		case bankaccount.FieldCustomerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value != nil {
				ba.CustomerID = *value
			}
		case bankaccount.FieldCashIn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cash_in", values[i])
			} else if value.Valid {
				ba.CashIn = value.Float64
			}
		case bankaccount.FieldCashOut:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cash_out", values[i])
			} else if value.Valid {
				ba.CashOut = value.Float64
			}
		case bankaccount.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				ba.AccountNumber = value.String
			}
		case bankaccount.FieldIsForPayment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_for_payment", values[i])
			} else if value.Valid {
				ba.IsForPayment = value.Bool
			}
		}
	}
	return nil
}

// QueryCustomer queries the "customer" edge of the BankAccount entity.
func (ba *BankAccount) QueryCustomer() *CustomerQuery {
	return (&BankAccountClient{config: ba.config}).QueryCustomer(ba)
}

// QuerySentTransaction queries the "sent_transaction" edge of the BankAccount entity.
func (ba *BankAccount) QuerySentTransaction() *TransactionQuery {
	return (&BankAccountClient{config: ba.config}).QuerySentTransaction(ba)
}

// QueryReceivedTransaction queries the "received_transaction" edge of the BankAccount entity.
func (ba *BankAccount) QueryReceivedTransaction() *TransactionQuery {
	return (&BankAccountClient{config: ba.config}).QueryReceivedTransaction(ba)
}

// QueryOwnedDebts queries the "owned_debts" edge of the BankAccount entity.
func (ba *BankAccount) QueryOwnedDebts() *DebtQuery {
	return (&BankAccountClient{config: ba.config}).QueryOwnedDebts(ba)
}

// QueryReceivedDebts queries the "received_debts" edge of the BankAccount entity.
func (ba *BankAccount) QueryReceivedDebts() *DebtQuery {
	return (&BankAccountClient{config: ba.config}).QueryReceivedDebts(ba)
}

// Update returns a builder for updating this BankAccount.
// Note that you need to call BankAccount.Unwrap() before calling this method if this BankAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BankAccount) Update() *BankAccountUpdateOne {
	return (&BankAccountClient{config: ba.config}).UpdateOne(ba)
}

// Unwrap unwraps the BankAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BankAccount) Unwrap() *BankAccount {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BankAccount is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BankAccount) String() string {
	var builder strings.Builder
	builder.WriteString("BankAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ba.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ba.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(fmt.Sprintf("%v", ba.CustomerID))
	builder.WriteString(", ")
	builder.WriteString("cash_in=")
	builder.WriteString(fmt.Sprintf("%v", ba.CashIn))
	builder.WriteString(", ")
	builder.WriteString("cash_out=")
	builder.WriteString(fmt.Sprintf("%v", ba.CashOut))
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(ba.AccountNumber)
	builder.WriteString(", ")
	builder.WriteString("is_for_payment=")
	builder.WriteString(fmt.Sprintf("%v", ba.IsForPayment))
	builder.WriteByte(')')
	return builder.String()
}

type BankAccountCreateRepository struct {
	client   *Client
	isAtomic bool
}

func NewBankAccountCreateRepository(
	client *Client,
	isAtomic bool,
) *BankAccountCreateRepository {
	return &BankAccountCreateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *BankAccountCreateRepository) CreateWithClient(
	ctx context.Context, client *Client, input *BankAccountCreateInput,
) (*BankAccount, error) {
	instance, err := client.BankAccount.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

func (r *BankAccountCreateRepository) Create(
	ctx context.Context, input *BankAccountCreateInput,
) (*BankAccount, error) {
	if !r.isAtomic {
		return r.CreateWithClient(ctx, r.client, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err := r.CreateWithClient(ctx, tx.Client(), input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

type BankAccountDeleteRepository struct {
	client   *Client
	isAtomic bool
}

func NewBankAccountDeleteRepository(
	client *Client,
	isAtomic bool,
) *BankAccountDeleteRepository {
	return &BankAccountDeleteRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *BankAccountDeleteRepository) DeleteWithClient(
	ctx context.Context, client *Client, instance *BankAccount,
) error {
	err := client.BankAccount.DeleteOne(instance).Exec(ctx)
	if err != nil {
		return err
	}
	return nil
}

func (r *BankAccountDeleteRepository) Delete(
	ctx context.Context, instance *BankAccount,
) error {
	if !r.isAtomic {
		return r.DeleteWithClient(ctx, r.client, instance)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return err
	}
	err = r.DeleteWithClient(ctx, tx.Client(), instance)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

// BankAccountCreateInput represents a mutation input for creating bankaccounts.
type BankAccountCreateInput struct {
	CreateTime             *time.Time  `json:"create_time,omitempty" form:"create_time"`
	UpdateTime             *time.Time  `json:"update_time,omitempty" form:"update_time"`
	CashIn                 float64     `json:"cash_in,omitempty" form:"cash_in"`
	CashOut                float64     `json:"cash_out,omitempty" form:"cash_out"`
	AccountNumber          *string     `json:"account_number,omitempty" form:"account_number"`
	IsForPayment           *bool       `json:"is_for_payment,omitempty" form:"is_for_payment"`
	CustomerID             uuid.UUID   `json:"customer_id,omitempty" form:"customer_id"`
	SentTransactionIDs     []uuid.UUID `json:"sent_transaction_ids,omitempty" form:"sent_transaction_ids"`
	ReceivedTransactionIDs []uuid.UUID `json:"received_transaction_ids,omitempty" form:"received_transaction_ids"`
	OwnedDebtIDs           []uuid.UUID `json:"owned_debt_ids,omitempty" form:"owned_debt_ids"`
	ReceivedDebtIDs        []uuid.UUID `json:"received_debt_ids,omitempty" form:"received_debt_ids"`
}

// Mutate applies the BankAccountCreateInput on the BankAccountCreate builder.
func (i *BankAccountCreateInput) Mutate(m *BankAccountMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetCashIn(i.CashIn)
	m.SetCashOut(i.CashOut)
	if v := i.AccountNumber; v != nil {
		m.SetAccountNumber(*v)
	}
	if v := i.IsForPayment; v != nil {
		m.SetIsForPayment(*v)
	}
	m.SetCustomerID(i.CustomerID)
	if ids := i.SentTransactionIDs; len(ids) > 0 {
		m.AddSentTransactionIDs(ids...)
	}
	if ids := i.ReceivedTransactionIDs; len(ids) > 0 {
		m.AddReceivedTransactionIDs(ids...)
	}
	if ids := i.OwnedDebtIDs; len(ids) > 0 {
		m.AddOwnedDebtIDs(ids...)
	}
	if ids := i.ReceivedDebtIDs; len(ids) > 0 {
		m.AddReceivedDebtIDs(ids...)
	}
}

// SetInput applies the change-set in the BankAccountCreateInput on the create builder.
func (c *BankAccountCreate) SetInput(i *BankAccountCreateInput) *BankAccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// BankAccountUpdateInput represents a mutation input for updating bankaccounts.
type BankAccountUpdateInput struct {
	ID                           uuid.UUID
	UpdateTime                   *time.Time `json:"update_time,omitempty" form:"update_time"`
	CashIn                       *float64   `json:"cash_in,omitempty" form:"cash_in"`
	CashOut                      *float64   `json:"cash_out,omitempty" form:"cash_out"`
	IsForPayment                 *bool      `json:"is_for_payment,omitempty" form:"is_for_payment"`
	CustomerID                   *uuid.UUID `json:"customer_id,omitempty" form:"customer_id"`
	ClearCustomer                bool
	AddSentTransactionIDs        []uuid.UUID `json:"add_sent_transaction_ids,omitempty" form:"add_sent_transaction_ids"`
	RemoveSentTransactionIDs     []uuid.UUID `json:"remove_sent_transaction_ids,omitempty" form:"remove_sent_transaction_ids"`
	AddReceivedTransactionIDs    []uuid.UUID `json:"add_received_transaction_ids,omitempty" form:"add_received_transaction_ids"`
	RemoveReceivedTransactionIDs []uuid.UUID `json:"remove_received_transaction_ids,omitempty" form:"remove_received_transaction_ids"`
	AddOwnedDebtIDs              []uuid.UUID `json:"add_owned_debt_ids,omitempty" form:"add_owned_debt_ids"`
	RemoveOwnedDebtIDs           []uuid.UUID `json:"remove_owned_debt_ids,omitempty" form:"remove_owned_debt_ids"`
	AddReceivedDebtIDs           []uuid.UUID `json:"add_received_debt_ids,omitempty" form:"add_received_debt_ids"`
	RemoveReceivedDebtIDs        []uuid.UUID `json:"remove_received_debt_ids,omitempty" form:"remove_received_debt_ids"`
}

// Mutate applies the BankAccountUpdateInput on the BankAccountMutation.
func (i *BankAccountUpdateInput) Mutate(m *BankAccountMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.CashIn; v != nil {
		m.SetCashIn(*v)
	}
	if v := i.CashOut; v != nil {
		m.SetCashOut(*v)
	}
	if v := i.IsForPayment; v != nil {
		m.SetIsForPayment(*v)
	}
	if i.ClearCustomer {
		m.ClearCustomer()
	}
	if v := i.CustomerID; v != nil {
		m.SetCustomerID(*v)
	}
	if ids := i.AddSentTransactionIDs; len(ids) > 0 {
		m.AddSentTransactionIDs(ids...)
	}
	if ids := i.RemoveSentTransactionIDs; len(ids) > 0 {
		m.RemoveSentTransactionIDs(ids...)
	}
	if ids := i.AddReceivedTransactionIDs; len(ids) > 0 {
		m.AddReceivedTransactionIDs(ids...)
	}
	if ids := i.RemoveReceivedTransactionIDs; len(ids) > 0 {
		m.RemoveReceivedTransactionIDs(ids...)
	}
	if ids := i.AddOwnedDebtIDs; len(ids) > 0 {
		m.AddOwnedDebtIDs(ids...)
	}
	if ids := i.RemoveOwnedDebtIDs; len(ids) > 0 {
		m.RemoveOwnedDebtIDs(ids...)
	}
	if ids := i.AddReceivedDebtIDs; len(ids) > 0 {
		m.AddReceivedDebtIDs(ids...)
	}
	if ids := i.RemoveReceivedDebtIDs; len(ids) > 0 {
		m.RemoveReceivedDebtIDs(ids...)
	}
}

// SetInput applies the change-set in the BankAccountUpdateInput on the update builder.
func (u *BankAccountUpdate) SetInput(i *BankAccountUpdateInput) *BankAccountUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the BankAccountUpdateInput on the update-one builder.
func (u *BankAccountUpdateOne) SetInput(i *BankAccountUpdateInput) *BankAccountUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

type BankAccountReadRepository struct {
	client *Client
}

func NewBankAccountReadRepository(
	client *Client,
) *BankAccountReadRepository {
	return &BankAccountReadRepository{
		client: client,
	}
}

func (r *BankAccountReadRepository) prepareQuery(
	client *Client, limit *int, offset *int, o *BankAccountOrderInput, w *BankAccountWhereInput,
) (*BankAccountQuery, error) {
	var err error
	q := r.client.BankAccount.Query()
	if limit != nil {
		q = q.Limit(*limit)
	}
	if offset != nil {
		q = q.Offset(*offset)
	}
	if o != nil {
		q = o.Order(q)
	}
	if w != nil {
		q, err = w.Filter(q)
		if err != nil {
			return nil, err
		}
	}
	return q, nil
}

// using in Tx
func (r *BankAccountReadRepository) GetWithClient(
	ctx context.Context, client *Client, w *BankAccountWhereInput, forUpdate bool,
) (*BankAccount, error) {
	q, err := r.prepareQuery(client, nil, nil, nil, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instance, err := q.Only(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

// using in Tx
func (r *BankAccountReadRepository) ListWithClient(
	ctx context.Context, client *Client, limit *int, offset *int, o *BankAccountOrderInput, w *BankAccountWhereInput, forUpdate bool,
) ([]*BankAccount, error) {
	q, err := r.prepareQuery(client, limit, offset, o, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instances, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (r *BankAccountReadRepository) Count(ctx context.Context, w *BankAccountWhereInput) (int, error) {
	q, err := r.prepareQuery(r.client, nil, nil, nil, w)
	if err != nil {
		return 0, err
	}
	count, err := q.Count(ctx)
	if err != nil {
		return 0, err
	}
	return count, nil
}

func (r *BankAccountReadRepository) Get(ctx context.Context, w *BankAccountWhereInput) (*BankAccount, error) {
	return r.GetWithClient(ctx, r.client, w, false)
}

func (r *BankAccountReadRepository) List(
	ctx context.Context, limit *int, offset *int, o *BankAccountOrderInput, w *BankAccountWhereInput,
) ([]*BankAccount, error) {
	return r.ListWithClient(ctx, r.client, limit, offset, o, w, false)
}

type BankAccountSerializer struct {
	columns map[string]func(context.Context, *BankAccount) any
}

func NewBankAccountSerializer(customColumns map[string]func(context.Context, *BankAccount) any, columns ...string) *BankAccountSerializer {
	columnsMap := map[string]func(context.Context, *BankAccount) any{}
	for _, col := range columns {
		switch col {

		case bankaccount.FieldID:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.ID
			}

		case bankaccount.FieldCreateTime:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.CreateTime
			}

		case bankaccount.FieldUpdateTime:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.UpdateTime
			}

		case bankaccount.FieldCustomerID:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.CustomerID
			}

		case bankaccount.FieldCashIn:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.CashIn
			}

		case bankaccount.FieldCashOut:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.CashOut
			}

		case bankaccount.FieldAccountNumber:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.AccountNumber
			}

		case bankaccount.FieldIsForPayment:
			columnsMap[col] = func(ctx context.Context, ba *BankAccount) any {
				return ba.IsForPayment
			}

		default:
			panic(fmt.Sprintf("Unexpect column %s", col))
		}
	}

	for k, serializeFunc := range customColumns {
		columnsMap[k] = serializeFunc
	}

	return &BankAccountSerializer{
		columns: columnsMap,
	}
}

func (s *BankAccountSerializer) Serialize(ctx context.Context, ba *BankAccount) map[string]any {
	result := make(map[string]any, len(s.columns))
	for col, serializeFunc := range s.columns {
		result[col] = serializeFunc(ctx, ba)
	}
	return result
}

type BankAccountUpdateRepository struct {
	client   *Client
	isAtomic bool
}

func NewBankAccountUpdateRepository(
	client *Client,
	isAtomic bool,
) *BankAccountUpdateRepository {
	return &BankAccountUpdateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *BankAccountUpdateRepository) UpdateWithClient(
	ctx context.Context, client *Client, instance *BankAccount, input *BankAccountUpdateInput,
) (*BankAccount, error) {
	newInstance, err := client.BankAccount.UpdateOne(instance).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return newInstance, nil
}

func (r *BankAccountUpdateRepository) Update(
	ctx context.Context, instance *BankAccount, input *BankAccountUpdateInput,
) (*BankAccount, error) {
	if !r.isAtomic {
		return r.UpdateWithClient(ctx, r.client, instance, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err = r.UpdateWithClient(ctx, tx.Client(), instance, input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

// BankAccountWhereInput represents a where input for filtering BankAccount queries.
type BankAccountWhereInput struct {
	Predicates []predicate.BankAccount  `json:"-"`
	Not        *BankAccountWhereInput   `json:"not,omitempty"`
	Or         []*BankAccountWhereInput `json:"or,omitempty"`
	And        []*BankAccountWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty" form:"id" param:"id" url:"id"`
	IDNEQ   *uuid.UUID  `json:"id_neq,omitempty" form:"id_neq" param:"id_neq" url:"id_neq"`
	IDIn    []uuid.UUID `json:"id_in,omitempty" form:"id_in" param:"id_in" url:"id_in"`
	IDNotIn []uuid.UUID `json:"id_not_in,omitempty" form:"id_not_in" param:"id_not_in" url:"id_not_in"`
	IDGT    *uuid.UUID  `json:"id_gt,omitempty" form:"id_gt" param:"id_gt" url:"id_gt"`
	IDGTE   *uuid.UUID  `json:"id_gte,omitempty" form:"id_gte" param:"id_gte" url:"id_gte"`
	IDLT    *uuid.UUID  `json:"id_lt,omitempty" form:"id_lt" param:"id_lt" url:"id_lt"`
	IDLTE   *uuid.UUID  `json:"id_lte,omitempty" form:"id_lte" param:"id_lte" url:"id_lte"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"create_time,omitempty" form:"create_time" param:"create_time" url:"create_time"`
	CreateTimeNEQ   *time.Time  `json:"create_time_neq,omitempty" form:"create_time_neq" param:"create_time_neq" url:"create_time_neq"`
	CreateTimeIn    []time.Time `json:"create_time_in,omitempty" form:"create_time_in" param:"create_time_in" url:"create_time_in"`
	CreateTimeNotIn []time.Time `json:"create_time_not_in,omitempty" form:"create_time_not_in" param:"create_time_not_in" url:"create_time_not_in"`
	CreateTimeGT    *time.Time  `json:"create_time_gt,omitempty" form:"create_time_gt" param:"create_time_gt" url:"create_time_gt"`
	CreateTimeGTE   *time.Time  `json:"create_time_gte,omitempty" form:"create_time_gte" param:"create_time_gte" url:"create_time_gte"`
	CreateTimeLT    *time.Time  `json:"create_time_lt,omitempty" form:"create_time_lt" param:"create_time_lt" url:"create_time_lt"`
	CreateTimeLTE   *time.Time  `json:"create_time_lte,omitempty" form:"create_time_lte" param:"create_time_lte" url:"create_time_lte"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"update_time,omitempty" form:"update_time" param:"update_time" url:"update_time"`
	UpdateTimeNEQ   *time.Time  `json:"update_time_neq,omitempty" form:"update_time_neq" param:"update_time_neq" url:"update_time_neq"`
	UpdateTimeIn    []time.Time `json:"update_time_in,omitempty" form:"update_time_in" param:"update_time_in" url:"update_time_in"`
	UpdateTimeNotIn []time.Time `json:"update_time_not_in,omitempty" form:"update_time_not_in" param:"update_time_not_in" url:"update_time_not_in"`
	UpdateTimeGT    *time.Time  `json:"update_time_gt,omitempty" form:"update_time_gt" param:"update_time_gt" url:"update_time_gt"`
	UpdateTimeGTE   *time.Time  `json:"update_time_gte,omitempty" form:"update_time_gte" param:"update_time_gte" url:"update_time_gte"`
	UpdateTimeLT    *time.Time  `json:"update_time_lt,omitempty" form:"update_time_lt" param:"update_time_lt" url:"update_time_lt"`
	UpdateTimeLTE   *time.Time  `json:"update_time_lte,omitempty" form:"update_time_lte" param:"update_time_lte" url:"update_time_lte"`

	// "customer_id" field predicates.
	CustomerID      *uuid.UUID  `json:"customer_id,omitempty" form:"customer_id" param:"customer_id" url:"customer_id"`
	CustomerIDNEQ   *uuid.UUID  `json:"customer_id_neq,omitempty" form:"customer_id_neq" param:"customer_id_neq" url:"customer_id_neq"`
	CustomerIDIn    []uuid.UUID `json:"customer_id_in,omitempty" form:"customer_id_in" param:"customer_id_in" url:"customer_id_in"`
	CustomerIDNotIn []uuid.UUID `json:"customer_id_not_in,omitempty" form:"customer_id_not_in" param:"customer_id_not_in" url:"customer_id_not_in"`

	// "cash_in" field predicates.
	CashIn      *float64  `json:"cash_in,omitempty" form:"cash_in" param:"cash_in" url:"cash_in"`
	CashInNEQ   *float64  `json:"cash_in_neq,omitempty" form:"cash_in_neq" param:"cash_in_neq" url:"cash_in_neq"`
	CashInIn    []float64 `json:"cash_in_in,omitempty" form:"cash_in_in" param:"cash_in_in" url:"cash_in_in"`
	CashInNotIn []float64 `json:"cash_in_not_in,omitempty" form:"cash_in_not_in" param:"cash_in_not_in" url:"cash_in_not_in"`
	CashInGT    *float64  `json:"cash_in_gt,omitempty" form:"cash_in_gt" param:"cash_in_gt" url:"cash_in_gt"`
	CashInGTE   *float64  `json:"cash_in_gte,omitempty" form:"cash_in_gte" param:"cash_in_gte" url:"cash_in_gte"`
	CashInLT    *float64  `json:"cash_in_lt,omitempty" form:"cash_in_lt" param:"cash_in_lt" url:"cash_in_lt"`
	CashInLTE   *float64  `json:"cash_in_lte,omitempty" form:"cash_in_lte" param:"cash_in_lte" url:"cash_in_lte"`

	// "cash_out" field predicates.
	CashOut      *float64  `json:"cash_out,omitempty" form:"cash_out" param:"cash_out" url:"cash_out"`
	CashOutNEQ   *float64  `json:"cash_out_neq,omitempty" form:"cash_out_neq" param:"cash_out_neq" url:"cash_out_neq"`
	CashOutIn    []float64 `json:"cash_out_in,omitempty" form:"cash_out_in" param:"cash_out_in" url:"cash_out_in"`
	CashOutNotIn []float64 `json:"cash_out_not_in,omitempty" form:"cash_out_not_in" param:"cash_out_not_in" url:"cash_out_not_in"`
	CashOutGT    *float64  `json:"cash_out_gt,omitempty" form:"cash_out_gt" param:"cash_out_gt" url:"cash_out_gt"`
	CashOutGTE   *float64  `json:"cash_out_gte,omitempty" form:"cash_out_gte" param:"cash_out_gte" url:"cash_out_gte"`
	CashOutLT    *float64  `json:"cash_out_lt,omitempty" form:"cash_out_lt" param:"cash_out_lt" url:"cash_out_lt"`
	CashOutLTE   *float64  `json:"cash_out_lte,omitempty" form:"cash_out_lte" param:"cash_out_lte" url:"cash_out_lte"`

	// "account_number" field predicates.
	AccountNumber             *string  `json:"account_number,omitempty" form:"account_number" param:"account_number" url:"account_number"`
	AccountNumberNEQ          *string  `json:"account_number_neq,omitempty" form:"account_number_neq" param:"account_number_neq" url:"account_number_neq"`
	AccountNumberIn           []string `json:"account_number_in,omitempty" form:"account_number_in" param:"account_number_in" url:"account_number_in"`
	AccountNumberNotIn        []string `json:"account_number_not_in,omitempty" form:"account_number_not_in" param:"account_number_not_in" url:"account_number_not_in"`
	AccountNumberGT           *string  `json:"account_number_gt,omitempty" form:"account_number_gt" param:"account_number_gt" url:"account_number_gt"`
	AccountNumberGTE          *string  `json:"account_number_gte,omitempty" form:"account_number_gte" param:"account_number_gte" url:"account_number_gte"`
	AccountNumberLT           *string  `json:"account_number_lt,omitempty" form:"account_number_lt" param:"account_number_lt" url:"account_number_lt"`
	AccountNumberLTE          *string  `json:"account_number_lte,omitempty" form:"account_number_lte" param:"account_number_lte" url:"account_number_lte"`
	AccountNumberContains     *string  `json:"account_number_contains,omitempty" form:"account_number_contains" param:"account_number_contains" url:"account_number_contains"`
	AccountNumberHasPrefix    *string  `json:"account_number_has_prefix,omitempty" form:"account_number_has_prefix" param:"account_number_has_prefix" url:"account_number_has_prefix"`
	AccountNumberHasSuffix    *string  `json:"account_number_has_suffix,omitempty" form:"account_number_has_suffix" param:"account_number_has_suffix" url:"account_number_has_suffix"`
	AccountNumberEqualFold    *string  `json:"account_number_equal_fold,omitempty" form:"account_number_equal_fold" param:"account_number_equal_fold" url:"account_number_equal_fold"`
	AccountNumberContainsFold *string  `json:"account_number_contains_fold,omitempty" form:"account_number_contains_fold" param:"account_number_contains_fold" url:"account_number_contains_fold"`

	// "is_for_payment" field predicates.
	IsForPayment    *bool `json:"is_for_payment,omitempty" form:"is_for_payment" param:"is_for_payment" url:"is_for_payment"`
	IsForPaymentNEQ *bool `json:"is_for_payment_neq,omitempty" form:"is_for_payment_neq" param:"is_for_payment_neq" url:"is_for_payment_neq"`

	// "customer" edge predicates.
	HasCustomer     *bool                 `json:"has_customer,omitempty" form:"has_customer" param:"has_customer" url:"has_customer"`
	HasCustomerWith []*CustomerWhereInput `json:"has_customer_with,omitempty" form:"has_customer_with" param:"has_customer_with" url:"has_customer_with"`

	// "sent_transaction" edge predicates.
	HasSentTransaction     *bool                    `json:"has_sent_transaction,omitempty" form:"has_sent_transaction" param:"has_sent_transaction" url:"has_sent_transaction"`
	HasSentTransactionWith []*TransactionWhereInput `json:"has_sent_transaction_with,omitempty" form:"has_sent_transaction_with" param:"has_sent_transaction_with" url:"has_sent_transaction_with"`

	// "received_transaction" edge predicates.
	HasReceivedTransaction     *bool                    `json:"has_received_transaction,omitempty" form:"has_received_transaction" param:"has_received_transaction" url:"has_received_transaction"`
	HasReceivedTransactionWith []*TransactionWhereInput `json:"has_received_transaction_with,omitempty" form:"has_received_transaction_with" param:"has_received_transaction_with" url:"has_received_transaction_with"`

	// "owned_debts" edge predicates.
	HasOwnedDebts     *bool             `json:"has_owned_debts,omitempty" form:"has_owned_debts" param:"has_owned_debts" url:"has_owned_debts"`
	HasOwnedDebtsWith []*DebtWhereInput `json:"has_owned_debts_with,omitempty" form:"has_owned_debts_with" param:"has_owned_debts_with" url:"has_owned_debts_with"`

	// "received_debts" edge predicates.
	HasReceivedDebts     *bool             `json:"has_received_debts,omitempty" form:"has_received_debts" param:"has_received_debts" url:"has_received_debts"`
	HasReceivedDebtsWith []*DebtWhereInput `json:"has_received_debts_with,omitempty" form:"has_received_debts_with" param:"has_received_debts_with" url:"has_received_debts_with"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *BankAccountWhereInput) AddPredicates(predicates ...predicate.BankAccount) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the BankAccountWhereInput filter on the BankAccountQuery builder.
func (i *BankAccountWhereInput) Filter(q *BankAccountQuery) (*BankAccountQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyBankAccountWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyBankAccountWhereInput is returned in case the BankAccountWhereInput is empty.
var ErrEmptyBankAccountWhereInput = errors.New("ent: empty predicate BankAccountWhereInput")

// P returns a predicate for filtering bankaccounts.
// An error is returned if the input is empty or invalid.
func (i *BankAccountWhereInput) P() (predicate.BankAccount, error) {
	var predicates []predicate.BankAccount
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, bankaccount.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.BankAccount, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, bankaccount.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.BankAccount, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, bankaccount.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, bankaccount.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, bankaccount.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, bankaccount.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, bankaccount.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, bankaccount.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, bankaccount.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, bankaccount.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, bankaccount.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, bankaccount.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, bankaccount.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, bankaccount.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, bankaccount.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, bankaccount.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, bankaccount.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, bankaccount.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, bankaccount.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, bankaccount.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, bankaccount.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, bankaccount.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, bankaccount.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, bankaccount.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, bankaccount.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, bankaccount.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, bankaccount.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.CustomerID != nil {
		predicates = append(predicates, bankaccount.CustomerIDEQ(*i.CustomerID))
	}
	if i.CustomerIDNEQ != nil {
		predicates = append(predicates, bankaccount.CustomerIDNEQ(*i.CustomerIDNEQ))
	}
	if len(i.CustomerIDIn) > 0 {
		predicates = append(predicates, bankaccount.CustomerIDIn(i.CustomerIDIn...))
	}
	if len(i.CustomerIDNotIn) > 0 {
		predicates = append(predicates, bankaccount.CustomerIDNotIn(i.CustomerIDNotIn...))
	}
	if i.CashIn != nil {
		predicates = append(predicates, bankaccount.CashInEQ(*i.CashIn))
	}
	if i.CashInNEQ != nil {
		predicates = append(predicates, bankaccount.CashInNEQ(*i.CashInNEQ))
	}
	if len(i.CashInIn) > 0 {
		predicates = append(predicates, bankaccount.CashInIn(i.CashInIn...))
	}
	if len(i.CashInNotIn) > 0 {
		predicates = append(predicates, bankaccount.CashInNotIn(i.CashInNotIn...))
	}
	if i.CashInGT != nil {
		predicates = append(predicates, bankaccount.CashInGT(*i.CashInGT))
	}
	if i.CashInGTE != nil {
		predicates = append(predicates, bankaccount.CashInGTE(*i.CashInGTE))
	}
	if i.CashInLT != nil {
		predicates = append(predicates, bankaccount.CashInLT(*i.CashInLT))
	}
	if i.CashInLTE != nil {
		predicates = append(predicates, bankaccount.CashInLTE(*i.CashInLTE))
	}
	if i.CashOut != nil {
		predicates = append(predicates, bankaccount.CashOutEQ(*i.CashOut))
	}
	if i.CashOutNEQ != nil {
		predicates = append(predicates, bankaccount.CashOutNEQ(*i.CashOutNEQ))
	}
	if len(i.CashOutIn) > 0 {
		predicates = append(predicates, bankaccount.CashOutIn(i.CashOutIn...))
	}
	if len(i.CashOutNotIn) > 0 {
		predicates = append(predicates, bankaccount.CashOutNotIn(i.CashOutNotIn...))
	}
	if i.CashOutGT != nil {
		predicates = append(predicates, bankaccount.CashOutGT(*i.CashOutGT))
	}
	if i.CashOutGTE != nil {
		predicates = append(predicates, bankaccount.CashOutGTE(*i.CashOutGTE))
	}
	if i.CashOutLT != nil {
		predicates = append(predicates, bankaccount.CashOutLT(*i.CashOutLT))
	}
	if i.CashOutLTE != nil {
		predicates = append(predicates, bankaccount.CashOutLTE(*i.CashOutLTE))
	}
	if i.AccountNumber != nil {
		predicates = append(predicates, bankaccount.AccountNumberEQ(*i.AccountNumber))
	}
	if i.AccountNumberNEQ != nil {
		predicates = append(predicates, bankaccount.AccountNumberNEQ(*i.AccountNumberNEQ))
	}
	if len(i.AccountNumberIn) > 0 {
		predicates = append(predicates, bankaccount.AccountNumberIn(i.AccountNumberIn...))
	}
	if len(i.AccountNumberNotIn) > 0 {
		predicates = append(predicates, bankaccount.AccountNumberNotIn(i.AccountNumberNotIn...))
	}
	if i.AccountNumberGT != nil {
		predicates = append(predicates, bankaccount.AccountNumberGT(*i.AccountNumberGT))
	}
	if i.AccountNumberGTE != nil {
		predicates = append(predicates, bankaccount.AccountNumberGTE(*i.AccountNumberGTE))
	}
	if i.AccountNumberLT != nil {
		predicates = append(predicates, bankaccount.AccountNumberLT(*i.AccountNumberLT))
	}
	if i.AccountNumberLTE != nil {
		predicates = append(predicates, bankaccount.AccountNumberLTE(*i.AccountNumberLTE))
	}
	if i.AccountNumberContains != nil {
		predicates = append(predicates, bankaccount.AccountNumberContains(*i.AccountNumberContains))
	}
	if i.AccountNumberHasPrefix != nil {
		predicates = append(predicates, bankaccount.AccountNumberHasPrefix(*i.AccountNumberHasPrefix))
	}
	if i.AccountNumberHasSuffix != nil {
		predicates = append(predicates, bankaccount.AccountNumberHasSuffix(*i.AccountNumberHasSuffix))
	}
	if i.AccountNumberEqualFold != nil {
		predicates = append(predicates, bankaccount.AccountNumberEqualFold(*i.AccountNumberEqualFold))
	}
	if i.AccountNumberContainsFold != nil {
		predicates = append(predicates, bankaccount.AccountNumberContainsFold(*i.AccountNumberContainsFold))
	}
	if i.IsForPayment != nil {
		predicates = append(predicates, bankaccount.IsForPaymentEQ(*i.IsForPayment))
	}
	if i.IsForPaymentNEQ != nil {
		predicates = append(predicates, bankaccount.IsForPaymentNEQ(*i.IsForPaymentNEQ))
	}

	if i.HasCustomer != nil {
		p := bankaccount.HasCustomer()
		if !*i.HasCustomer {
			p = bankaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCustomerWith) > 0 {
		with := make([]predicate.Customer, 0, len(i.HasCustomerWith))
		for _, w := range i.HasCustomerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCustomerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bankaccount.HasCustomerWith(with...))
	}
	if i.HasSentTransaction != nil {
		p := bankaccount.HasSentTransaction()
		if !*i.HasSentTransaction {
			p = bankaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSentTransactionWith) > 0 {
		with := make([]predicate.Transaction, 0, len(i.HasSentTransactionWith))
		for _, w := range i.HasSentTransactionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSentTransactionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bankaccount.HasSentTransactionWith(with...))
	}
	if i.HasReceivedTransaction != nil {
		p := bankaccount.HasReceivedTransaction()
		if !*i.HasReceivedTransaction {
			p = bankaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReceivedTransactionWith) > 0 {
		with := make([]predicate.Transaction, 0, len(i.HasReceivedTransactionWith))
		for _, w := range i.HasReceivedTransactionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasReceivedTransactionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bankaccount.HasReceivedTransactionWith(with...))
	}
	if i.HasOwnedDebts != nil {
		p := bankaccount.HasOwnedDebts()
		if !*i.HasOwnedDebts {
			p = bankaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnedDebtsWith) > 0 {
		with := make([]predicate.Debt, 0, len(i.HasOwnedDebtsWith))
		for _, w := range i.HasOwnedDebtsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnedDebtsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bankaccount.HasOwnedDebtsWith(with...))
	}
	if i.HasReceivedDebts != nil {
		p := bankaccount.HasReceivedDebts()
		if !*i.HasReceivedDebts {
			p = bankaccount.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReceivedDebtsWith) > 0 {
		with := make([]predicate.Debt, 0, len(i.HasReceivedDebtsWith))
		for _, w := range i.HasReceivedDebtsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasReceivedDebtsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, bankaccount.HasReceivedDebtsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyBankAccountWhereInput
	case 1:
		return predicates[0], nil
	default:
		return bankaccount.And(predicates...), nil
	}
}

// BankAccounts is a parsable slice of BankAccount.
type BankAccounts []*BankAccount

func (ba BankAccounts) config(cfg config) {
	for _i := range ba {
		ba[_i].config = cfg
	}
}
