// Code generated by ent, DO NOT EDIT.

package bankaccount

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bankaccount type in the database.
	Label = "bank_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldCashIn holds the string denoting the cash_in field in the database.
	FieldCashIn = "cash_in"
	// FieldCashOut holds the string denoting the cash_out field in the database.
	FieldCashOut = "cash_out"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldIsForPayment holds the string denoting the is_for_payment field in the database.
	FieldIsForPayment = "is_for_payment"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeSentTransaction holds the string denoting the sent_transaction edge name in mutations.
	EdgeSentTransaction = "sent_transaction"
	// EdgeReceivedTransaction holds the string denoting the received_transaction edge name in mutations.
	EdgeReceivedTransaction = "received_transaction"
	// EdgeOwnedDebts holds the string denoting the owned_debts edge name in mutations.
	EdgeOwnedDebts = "owned_debts"
	// EdgeReceivedDebts holds the string denoting the received_debts edge name in mutations.
	EdgeReceivedDebts = "received_debts"
	// Table holds the table name of the bankaccount in the database.
	Table = "bank_accounts"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "bank_accounts"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// SentTransactionTable is the table that holds the sent_transaction relation/edge.
	SentTransactionTable = "transactions"
	// SentTransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	SentTransactionInverseTable = "transactions"
	// SentTransactionColumn is the table column denoting the sent_transaction relation/edge.
	SentTransactionColumn = "sender_id"
	// ReceivedTransactionTable is the table that holds the received_transaction relation/edge.
	ReceivedTransactionTable = "transactions"
	// ReceivedTransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	ReceivedTransactionInverseTable = "transactions"
	// ReceivedTransactionColumn is the table column denoting the received_transaction relation/edge.
	ReceivedTransactionColumn = "receiver_id"
	// OwnedDebtsTable is the table that holds the owned_debts relation/edge.
	OwnedDebtsTable = "debts"
	// OwnedDebtsInverseTable is the table name for the Debt entity.
	// It exists in this package in order to avoid circular dependency with the "debt" package.
	OwnedDebtsInverseTable = "debts"
	// OwnedDebtsColumn is the table column denoting the owned_debts relation/edge.
	OwnedDebtsColumn = "owner_id"
	// ReceivedDebtsTable is the table that holds the received_debts relation/edge.
	ReceivedDebtsTable = "debts"
	// ReceivedDebtsInverseTable is the table name for the Debt entity.
	// It exists in this package in order to avoid circular dependency with the "debt" package.
	ReceivedDebtsInverseTable = "debts"
	// ReceivedDebtsColumn is the table column denoting the received_debts relation/edge.
	ReceivedDebtsColumn = "receiver_id"
)

// Columns holds all SQL columns for bankaccount fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCustomerID,
	FieldCashIn,
	FieldCashOut,
	FieldAccountNumber,
	FieldIsForPayment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CashInValidator is a validator for the "cash_in" field. It is called by the builders before save.
	CashInValidator func(float64) error
	// CashOutValidator is a validator for the "cash_out" field. It is called by the builders before save.
	CashOutValidator func(float64) error
	// DefaultAccountNumber holds the default value on creation for the "account_number" field.
	DefaultAccountNumber func() string
	// AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	AccountNumberValidator func(string) error
	// DefaultIsForPayment holds the default value on creation for the "is_for_payment" field.
	DefaultIsForPayment bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
