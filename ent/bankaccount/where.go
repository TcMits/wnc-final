// Code generated by ent, DO NOT EDIT.

package bankaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CashIn applies equality check predicate on the "cash_in" field. It's identical to CashInEQ.
func CashIn(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashIn), v))
	})
}

// CashOut applies equality check predicate on the "cash_out" field. It's identical to CashOutEQ.
func CashOut(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashOut), v))
	})
}

// AccountNumber applies equality check predicate on the "account_number" field. It's identical to AccountNumberEQ.
func AccountNumber(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountNumber), v))
	})
}

// IsForPayment applies equality check predicate on the "is_for_payment" field. It's identical to IsForPaymentEQ.
func IsForPayment(v bool) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsForPayment), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v uuid.UUID) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerID), v))
	})
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...uuid.UUID) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerID), v...))
	})
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...uuid.UUID) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerID), v...))
	})
}

// CashInEQ applies the EQ predicate on the "cash_in" field.
func CashInEQ(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashIn), v))
	})
}

// CashInNEQ applies the NEQ predicate on the "cash_in" field.
func CashInNEQ(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCashIn), v))
	})
}

// CashInIn applies the In predicate on the "cash_in" field.
func CashInIn(vs ...float64) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCashIn), v...))
	})
}

// CashInNotIn applies the NotIn predicate on the "cash_in" field.
func CashInNotIn(vs ...float64) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCashIn), v...))
	})
}

// CashInGT applies the GT predicate on the "cash_in" field.
func CashInGT(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCashIn), v))
	})
}

// CashInGTE applies the GTE predicate on the "cash_in" field.
func CashInGTE(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCashIn), v))
	})
}

// CashInLT applies the LT predicate on the "cash_in" field.
func CashInLT(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCashIn), v))
	})
}

// CashInLTE applies the LTE predicate on the "cash_in" field.
func CashInLTE(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCashIn), v))
	})
}

// CashOutEQ applies the EQ predicate on the "cash_out" field.
func CashOutEQ(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCashOut), v))
	})
}

// CashOutNEQ applies the NEQ predicate on the "cash_out" field.
func CashOutNEQ(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCashOut), v))
	})
}

// CashOutIn applies the In predicate on the "cash_out" field.
func CashOutIn(vs ...float64) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCashOut), v...))
	})
}

// CashOutNotIn applies the NotIn predicate on the "cash_out" field.
func CashOutNotIn(vs ...float64) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCashOut), v...))
	})
}

// CashOutGT applies the GT predicate on the "cash_out" field.
func CashOutGT(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCashOut), v))
	})
}

// CashOutGTE applies the GTE predicate on the "cash_out" field.
func CashOutGTE(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCashOut), v))
	})
}

// CashOutLT applies the LT predicate on the "cash_out" field.
func CashOutLT(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCashOut), v))
	})
}

// CashOutLTE applies the LTE predicate on the "cash_out" field.
func CashOutLTE(v float64) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCashOut), v))
	})
}

// AccountNumberEQ applies the EQ predicate on the "account_number" field.
func AccountNumberEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberNEQ applies the NEQ predicate on the "account_number" field.
func AccountNumberNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberIn applies the In predicate on the "account_number" field.
func AccountNumberIn(vs ...string) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAccountNumber), v...))
	})
}

// AccountNumberNotIn applies the NotIn predicate on the "account_number" field.
func AccountNumberNotIn(vs ...string) predicate.BankAccount {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAccountNumber), v...))
	})
}

// AccountNumberGT applies the GT predicate on the "account_number" field.
func AccountNumberGT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberGTE applies the GTE predicate on the "account_number" field.
func AccountNumberGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberLT applies the LT predicate on the "account_number" field.
func AccountNumberLT(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberLTE applies the LTE predicate on the "account_number" field.
func AccountNumberLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberContains applies the Contains predicate on the "account_number" field.
func AccountNumberContains(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberHasPrefix applies the HasPrefix predicate on the "account_number" field.
func AccountNumberHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberHasSuffix applies the HasSuffix predicate on the "account_number" field.
func AccountNumberHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberEqualFold applies the EqualFold predicate on the "account_number" field.
func AccountNumberEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountNumber), v))
	})
}

// AccountNumberContainsFold applies the ContainsFold predicate on the "account_number" field.
func AccountNumberContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountNumber), v))
	})
}

// IsForPaymentEQ applies the EQ predicate on the "is_for_payment" field.
func IsForPaymentEQ(v bool) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsForPayment), v))
	})
}

// IsForPaymentNEQ applies the NEQ predicate on the "is_for_payment" field.
func IsForPaymentNEQ(v bool) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsForPayment), v))
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CustomerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSentTransaction applies the HasEdge predicate on the "sent_transaction" edge.
func HasSentTransaction() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SentTransactionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SentTransactionTable, SentTransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSentTransactionWith applies the HasEdge predicate on the "sent_transaction" edge with a given conditions (other predicates).
func HasSentTransactionWith(preds ...predicate.Transaction) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SentTransactionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SentTransactionTable, SentTransactionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceivedTransaction applies the HasEdge predicate on the "received_transaction" edge.
func HasReceivedTransaction() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceivedTransactionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReceivedTransactionTable, ReceivedTransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivedTransactionWith applies the HasEdge predicate on the "received_transaction" edge with a given conditions (other predicates).
func HasReceivedTransactionWith(preds ...predicate.Transaction) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceivedTransactionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReceivedTransactionTable, ReceivedTransactionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwnedDebts applies the HasEdge predicate on the "owned_debts" edge.
func HasOwnedDebts() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedDebtsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OwnedDebtsTable, OwnedDebtsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnedDebtsWith applies the HasEdge predicate on the "owned_debts" edge with a given conditions (other predicates).
func HasOwnedDebtsWith(preds ...predicate.Debt) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnedDebtsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OwnedDebtsTable, OwnedDebtsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceivedDebts applies the HasEdge predicate on the "received_debts" edge.
func HasReceivedDebts() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceivedDebtsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReceivedDebtsTable, ReceivedDebtsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceivedDebtsWith applies the HasEdge predicate on the "received_debts" edge with a given conditions (other predicates).
func HasReceivedDebtsWith(preds ...predicate.Debt) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceivedDebtsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReceivedDebtsTable, ReceivedDebtsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
