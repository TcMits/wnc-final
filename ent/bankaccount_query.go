// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/customer"
	"github.com/TcMits/wnc-final/ent/debt"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/TcMits/wnc-final/ent/transaction"
	"github.com/google/uuid"
)

// BankAccountQuery is the builder for querying BankAccount entities.
type BankAccountQuery struct {
	config
	limit                   *int
	offset                  *int
	unique                  *bool
	order                   []OrderFunc
	fields                  []string
	predicates              []predicate.BankAccount
	withCustomer            *CustomerQuery
	withSentTransaction     *TransactionQuery
	withReceivedTransaction *TransactionQuery
	withOwnedDebts          *DebtQuery
	withReceivedDebts       *DebtQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BankAccountQuery builder.
func (baq *BankAccountQuery) Where(ps ...predicate.BankAccount) *BankAccountQuery {
	baq.predicates = append(baq.predicates, ps...)
	return baq
}

// Limit adds a limit step to the query.
func (baq *BankAccountQuery) Limit(limit int) *BankAccountQuery {
	baq.limit = &limit
	return baq
}

// Offset adds an offset step to the query.
func (baq *BankAccountQuery) Offset(offset int) *BankAccountQuery {
	baq.offset = &offset
	return baq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (baq *BankAccountQuery) Unique(unique bool) *BankAccountQuery {
	baq.unique = &unique
	return baq
}

// Order adds an order step to the query.
func (baq *BankAccountQuery) Order(o ...OrderFunc) *BankAccountQuery {
	baq.order = append(baq.order, o...)
	return baq
}

// QueryCustomer chains the current query on the "customer" edge.
func (baq *BankAccountQuery) QueryCustomer() *CustomerQuery {
	query := &CustomerQuery{config: baq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, selector),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bankaccount.CustomerTable, bankaccount.CustomerColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySentTransaction chains the current query on the "sent_transaction" edge.
func (baq *BankAccountQuery) QuerySentTransaction() *TransactionQuery {
	query := &TransactionQuery{config: baq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, bankaccount.SentTransactionTable, bankaccount.SentTransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReceivedTransaction chains the current query on the "received_transaction" edge.
func (baq *BankAccountQuery) QueryReceivedTransaction() *TransactionQuery {
	query := &TransactionQuery{config: baq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, bankaccount.ReceivedTransactionTable, bankaccount.ReceivedTransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnedDebts chains the current query on the "owned_debts" edge.
func (baq *BankAccountQuery) QueryOwnedDebts() *DebtQuery {
	query := &DebtQuery{config: baq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, selector),
			sqlgraph.To(debt.Table, debt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, bankaccount.OwnedDebtsTable, bankaccount.OwnedDebtsColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReceivedDebts chains the current query on the "received_debts" edge.
func (baq *BankAccountQuery) QueryReceivedDebts() *DebtQuery {
	query := &DebtQuery{config: baq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bankaccount.Table, bankaccount.FieldID, selector),
			sqlgraph.To(debt.Table, debt.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, bankaccount.ReceivedDebtsTable, bankaccount.ReceivedDebtsColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BankAccount entity from the query.
// Returns a *NotFoundError when no BankAccount was found.
func (baq *BankAccountQuery) First(ctx context.Context) (*BankAccount, error) {
	nodes, err := baq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bankaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (baq *BankAccountQuery) FirstX(ctx context.Context) *BankAccount {
	node, err := baq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BankAccount ID from the query.
// Returns a *NotFoundError when no BankAccount ID was found.
func (baq *BankAccountQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = baq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bankaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (baq *BankAccountQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := baq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BankAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BankAccount entity is found.
// Returns a *NotFoundError when no BankAccount entities are found.
func (baq *BankAccountQuery) Only(ctx context.Context) (*BankAccount, error) {
	nodes, err := baq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bankaccount.Label}
	default:
		return nil, &NotSingularError{bankaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (baq *BankAccountQuery) OnlyX(ctx context.Context) *BankAccount {
	node, err := baq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BankAccount ID in the query.
// Returns a *NotSingularError when more than one BankAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (baq *BankAccountQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = baq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bankaccount.Label}
	default:
		err = &NotSingularError{bankaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (baq *BankAccountQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := baq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BankAccounts.
func (baq *BankAccountQuery) All(ctx context.Context) ([]*BankAccount, error) {
	if err := baq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return baq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (baq *BankAccountQuery) AllX(ctx context.Context) []*BankAccount {
	nodes, err := baq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BankAccount IDs.
func (baq *BankAccountQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := baq.Select(bankaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (baq *BankAccountQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := baq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (baq *BankAccountQuery) Count(ctx context.Context) (int, error) {
	if err := baq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return baq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (baq *BankAccountQuery) CountX(ctx context.Context) int {
	count, err := baq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (baq *BankAccountQuery) Exist(ctx context.Context) (bool, error) {
	if err := baq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return baq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (baq *BankAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := baq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BankAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (baq *BankAccountQuery) Clone() *BankAccountQuery {
	if baq == nil {
		return nil
	}
	return &BankAccountQuery{
		config:                  baq.config,
		limit:                   baq.limit,
		offset:                  baq.offset,
		order:                   append([]OrderFunc{}, baq.order...),
		predicates:              append([]predicate.BankAccount{}, baq.predicates...),
		withCustomer:            baq.withCustomer.Clone(),
		withSentTransaction:     baq.withSentTransaction.Clone(),
		withReceivedTransaction: baq.withReceivedTransaction.Clone(),
		withOwnedDebts:          baq.withOwnedDebts.Clone(),
		withReceivedDebts:       baq.withReceivedDebts.Clone(),
		// clone intermediate query.
		sql:    baq.sql.Clone(),
		path:   baq.path,
		unique: baq.unique,
	}
}

// WithCustomer tells the query-builder to eager-load the nodes that are connected to
// the "customer" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BankAccountQuery) WithCustomer(opts ...func(*CustomerQuery)) *BankAccountQuery {
	query := &CustomerQuery{config: baq.config}
	for _, opt := range opts {
		opt(query)
	}
	baq.withCustomer = query
	return baq
}

// WithSentTransaction tells the query-builder to eager-load the nodes that are connected to
// the "sent_transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BankAccountQuery) WithSentTransaction(opts ...func(*TransactionQuery)) *BankAccountQuery {
	query := &TransactionQuery{config: baq.config}
	for _, opt := range opts {
		opt(query)
	}
	baq.withSentTransaction = query
	return baq
}

// WithReceivedTransaction tells the query-builder to eager-load the nodes that are connected to
// the "received_transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BankAccountQuery) WithReceivedTransaction(opts ...func(*TransactionQuery)) *BankAccountQuery {
	query := &TransactionQuery{config: baq.config}
	for _, opt := range opts {
		opt(query)
	}
	baq.withReceivedTransaction = query
	return baq
}

// WithOwnedDebts tells the query-builder to eager-load the nodes that are connected to
// the "owned_debts" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BankAccountQuery) WithOwnedDebts(opts ...func(*DebtQuery)) *BankAccountQuery {
	query := &DebtQuery{config: baq.config}
	for _, opt := range opts {
		opt(query)
	}
	baq.withOwnedDebts = query
	return baq
}

// WithReceivedDebts tells the query-builder to eager-load the nodes that are connected to
// the "received_debts" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BankAccountQuery) WithReceivedDebts(opts ...func(*DebtQuery)) *BankAccountQuery {
	query := &DebtQuery{config: baq.config}
	for _, opt := range opts {
		opt(query)
	}
	baq.withReceivedDebts = query
	return baq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BankAccount.Query().
//		GroupBy(bankaccount.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (baq *BankAccountQuery) GroupBy(field string, fields ...string) *BankAccountGroupBy {
	grbuild := &BankAccountGroupBy{config: baq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return baq.sqlQuery(ctx), nil
	}
	grbuild.label = bankaccount.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.BankAccount.Query().
//		Select(bankaccount.FieldCreateTime).
//		Scan(ctx, &v)
func (baq *BankAccountQuery) Select(fields ...string) *BankAccountSelect {
	baq.fields = append(baq.fields, fields...)
	selbuild := &BankAccountSelect{BankAccountQuery: baq}
	selbuild.label = bankaccount.Label
	selbuild.flds, selbuild.scan = &baq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a BankAccountSelect configured with the given aggregations.
func (baq *BankAccountQuery) Aggregate(fns ...AggregateFunc) *BankAccountSelect {
	return baq.Select().Aggregate(fns...)
}

func (baq *BankAccountQuery) prepareQuery(ctx context.Context) error {
	for _, f := range baq.fields {
		if !bankaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if baq.path != nil {
		prev, err := baq.path(ctx)
		if err != nil {
			return err
		}
		baq.sql = prev
	}
	return nil
}

func (baq *BankAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BankAccount, error) {
	var (
		nodes       = []*BankAccount{}
		_spec       = baq.querySpec()
		loadedTypes = [5]bool{
			baq.withCustomer != nil,
			baq.withSentTransaction != nil,
			baq.withReceivedTransaction != nil,
			baq.withOwnedDebts != nil,
			baq.withReceivedDebts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BankAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BankAccount{config: baq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(baq.modifiers) > 0 {
		_spec.Modifiers = baq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, baq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := baq.withCustomer; query != nil {
		if err := baq.loadCustomer(ctx, query, nodes, nil,
			func(n *BankAccount, e *Customer) { n.Edges.Customer = e }); err != nil {
			return nil, err
		}
	}
	if query := baq.withSentTransaction; query != nil {
		if err := baq.loadSentTransaction(ctx, query, nodes,
			func(n *BankAccount) { n.Edges.SentTransaction = []*Transaction{} },
			func(n *BankAccount, e *Transaction) { n.Edges.SentTransaction = append(n.Edges.SentTransaction, e) }); err != nil {
			return nil, err
		}
	}
	if query := baq.withReceivedTransaction; query != nil {
		if err := baq.loadReceivedTransaction(ctx, query, nodes,
			func(n *BankAccount) { n.Edges.ReceivedTransaction = []*Transaction{} },
			func(n *BankAccount, e *Transaction) {
				n.Edges.ReceivedTransaction = append(n.Edges.ReceivedTransaction, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := baq.withOwnedDebts; query != nil {
		if err := baq.loadOwnedDebts(ctx, query, nodes,
			func(n *BankAccount) { n.Edges.OwnedDebts = []*Debt{} },
			func(n *BankAccount, e *Debt) { n.Edges.OwnedDebts = append(n.Edges.OwnedDebts, e) }); err != nil {
			return nil, err
		}
	}
	if query := baq.withReceivedDebts; query != nil {
		if err := baq.loadReceivedDebts(ctx, query, nodes,
			func(n *BankAccount) { n.Edges.ReceivedDebts = []*Debt{} },
			func(n *BankAccount, e *Debt) { n.Edges.ReceivedDebts = append(n.Edges.ReceivedDebts, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (baq *BankAccountQuery) loadCustomer(ctx context.Context, query *CustomerQuery, nodes []*BankAccount, init func(*BankAccount), assign func(*BankAccount, *Customer)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BankAccount)
	for i := range nodes {
		fk := nodes[i].CustomerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(customer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "customer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (baq *BankAccountQuery) loadSentTransaction(ctx context.Context, query *TransactionQuery, nodes []*BankAccount, init func(*BankAccount), assign func(*BankAccount, *Transaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BankAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.InValues(bankaccount.SentTransactionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SenderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "sender_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sender_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BankAccountQuery) loadReceivedTransaction(ctx context.Context, query *TransactionQuery, nodes []*BankAccount, init func(*BankAccount), assign func(*BankAccount, *Transaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BankAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.InValues(bankaccount.ReceivedTransactionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReceiverID
		if fk == nil {
			return fmt.Errorf(`foreign-key "receiver_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "receiver_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BankAccountQuery) loadOwnedDebts(ctx context.Context, query *DebtQuery, nodes []*BankAccount, init func(*BankAccount), assign func(*BankAccount, *Debt)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BankAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.InValues(bankaccount.OwnedDebtsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BankAccountQuery) loadReceivedDebts(ctx context.Context, query *DebtQuery, nodes []*BankAccount, init func(*BankAccount), assign func(*BankAccount, *Debt)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BankAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.InValues(bankaccount.ReceivedDebtsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReceiverID
		if fk == nil {
			return fmt.Errorf(`foreign-key "receiver_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "receiver_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (baq *BankAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := baq.querySpec()
	if len(baq.modifiers) > 0 {
		_spec.Modifiers = baq.modifiers
	}
	_spec.Node.Columns = baq.fields
	if len(baq.fields) > 0 {
		_spec.Unique = baq.unique != nil && *baq.unique
	}
	return sqlgraph.CountNodes(ctx, baq.driver, _spec)
}

func (baq *BankAccountQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := baq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (baq *BankAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankaccount.Table,
			Columns: bankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bankaccount.FieldID,
			},
		},
		From:   baq.sql,
		Unique: true,
	}
	if unique := baq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := baq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bankaccount.FieldID)
		for i := range fields {
			if fields[i] != bankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := baq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := baq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := baq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := baq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (baq *BankAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(baq.driver.Dialect())
	t1 := builder.Table(bankaccount.Table)
	columns := baq.fields
	if len(columns) == 0 {
		columns = bankaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if baq.sql != nil {
		selector = baq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if baq.unique != nil && *baq.unique {
		selector.Distinct()
	}
	for _, m := range baq.modifiers {
		m(selector)
	}
	for _, p := range baq.predicates {
		p(selector)
	}
	for _, p := range baq.order {
		p(selector)
	}
	if offset := baq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := baq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (baq *BankAccountQuery) ForUpdate(opts ...sql.LockOption) *BankAccountQuery {
	if baq.driver.Dialect() == dialect.Postgres {
		baq.Unique(false)
	}
	baq.modifiers = append(baq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return baq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (baq *BankAccountQuery) ForShare(opts ...sql.LockOption) *BankAccountQuery {
	if baq.driver.Dialect() == dialect.Postgres {
		baq.Unique(false)
	}
	baq.modifiers = append(baq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return baq
}

// BankAccountGroupBy is the group-by builder for BankAccount entities.
type BankAccountGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bagb *BankAccountGroupBy) Aggregate(fns ...AggregateFunc) *BankAccountGroupBy {
	bagb.fns = append(bagb.fns, fns...)
	return bagb
}

// Scan applies the group-by query and scans the result into the given value.
func (bagb *BankAccountGroupBy) Scan(ctx context.Context, v any) error {
	query, err := bagb.path(ctx)
	if err != nil {
		return err
	}
	bagb.sql = query
	return bagb.sqlScan(ctx, v)
}

func (bagb *BankAccountGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range bagb.fields {
		if !bankaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bagb *BankAccountGroupBy) sqlQuery() *sql.Selector {
	selector := bagb.sql.Select()
	aggregation := make([]string, 0, len(bagb.fns))
	for _, fn := range bagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bagb.fields)+len(bagb.fns))
		for _, f := range bagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bagb.fields...)...)
}

// BankAccountSelect is the builder for selecting fields of BankAccount entities.
type BankAccountSelect struct {
	*BankAccountQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bas *BankAccountSelect) Aggregate(fns ...AggregateFunc) *BankAccountSelect {
	bas.fns = append(bas.fns, fns...)
	return bas
}

// Scan applies the selector query and scans the result into the given value.
func (bas *BankAccountSelect) Scan(ctx context.Context, v any) error {
	if err := bas.prepareQuery(ctx); err != nil {
		return err
	}
	bas.sql = bas.BankAccountQuery.sqlQuery(ctx)
	return bas.sqlScan(ctx, v)
}

func (bas *BankAccountSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(bas.fns))
	for _, fn := range bas.fns {
		aggregation = append(aggregation, fn(bas.sql))
	}
	switch n := len(*bas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		bas.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		bas.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := bas.sql.Query()
	if err := bas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
