// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/customer"
	"github.com/TcMits/wnc-final/ent/debt"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/TcMits/wnc-final/ent/transaction"
	"github.com/google/uuid"
)

// BankAccountUpdate is the builder for updating BankAccount entities.
type BankAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BankAccountMutation
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bau *BankAccountUpdate) Where(ps ...predicate.BankAccount) *BankAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetUpdateTime sets the "update_time" field.
func (bau *BankAccountUpdate) SetUpdateTime(t time.Time) *BankAccountUpdate {
	bau.mutation.SetUpdateTime(t)
	return bau
}

// SetCustomerID sets the "customer_id" field.
func (bau *BankAccountUpdate) SetCustomerID(u uuid.UUID) *BankAccountUpdate {
	bau.mutation.SetCustomerID(u)
	return bau
}

// SetCashIn sets the "cash_in" field.
func (bau *BankAccountUpdate) SetCashIn(f float64) *BankAccountUpdate {
	bau.mutation.ResetCashIn()
	bau.mutation.SetCashIn(f)
	return bau
}

// AddCashIn adds f to the "cash_in" field.
func (bau *BankAccountUpdate) AddCashIn(f float64) *BankAccountUpdate {
	bau.mutation.AddCashIn(f)
	return bau
}

// SetCashOut sets the "cash_out" field.
func (bau *BankAccountUpdate) SetCashOut(f float64) *BankAccountUpdate {
	bau.mutation.ResetCashOut()
	bau.mutation.SetCashOut(f)
	return bau
}

// AddCashOut adds f to the "cash_out" field.
func (bau *BankAccountUpdate) AddCashOut(f float64) *BankAccountUpdate {
	bau.mutation.AddCashOut(f)
	return bau
}

// SetIsForPayment sets the "is_for_payment" field.
func (bau *BankAccountUpdate) SetIsForPayment(b bool) *BankAccountUpdate {
	bau.mutation.SetIsForPayment(b)
	return bau
}

// SetNillableIsForPayment sets the "is_for_payment" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableIsForPayment(b *bool) *BankAccountUpdate {
	if b != nil {
		bau.SetIsForPayment(*b)
	}
	return bau
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bau *BankAccountUpdate) SetCustomer(c *Customer) *BankAccountUpdate {
	return bau.SetCustomerID(c.ID)
}

// AddSentTransactionIDs adds the "sent_transaction" edge to the Transaction entity by IDs.
func (bau *BankAccountUpdate) AddSentTransactionIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.AddSentTransactionIDs(ids...)
	return bau
}

// AddSentTransaction adds the "sent_transaction" edges to the Transaction entity.
func (bau *BankAccountUpdate) AddSentTransaction(t ...*Transaction) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bau.AddSentTransactionIDs(ids...)
}

// AddReceivedTransactionIDs adds the "received_transaction" edge to the Transaction entity by IDs.
func (bau *BankAccountUpdate) AddReceivedTransactionIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.AddReceivedTransactionIDs(ids...)
	return bau
}

// AddReceivedTransaction adds the "received_transaction" edges to the Transaction entity.
func (bau *BankAccountUpdate) AddReceivedTransaction(t ...*Transaction) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bau.AddReceivedTransactionIDs(ids...)
}

// AddOwnedDebtIDs adds the "owned_debts" edge to the Debt entity by IDs.
func (bau *BankAccountUpdate) AddOwnedDebtIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.AddOwnedDebtIDs(ids...)
	return bau
}

// AddOwnedDebts adds the "owned_debts" edges to the Debt entity.
func (bau *BankAccountUpdate) AddOwnedDebts(d ...*Debt) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bau.AddOwnedDebtIDs(ids...)
}

// AddReceivedDebtIDs adds the "received_debts" edge to the Debt entity by IDs.
func (bau *BankAccountUpdate) AddReceivedDebtIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.AddReceivedDebtIDs(ids...)
	return bau
}

// AddReceivedDebts adds the "received_debts" edges to the Debt entity.
func (bau *BankAccountUpdate) AddReceivedDebts(d ...*Debt) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bau.AddReceivedDebtIDs(ids...)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bau *BankAccountUpdate) Mutation() *BankAccountMutation {
	return bau.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bau *BankAccountUpdate) ClearCustomer() *BankAccountUpdate {
	bau.mutation.ClearCustomer()
	return bau
}

// ClearSentTransaction clears all "sent_transaction" edges to the Transaction entity.
func (bau *BankAccountUpdate) ClearSentTransaction() *BankAccountUpdate {
	bau.mutation.ClearSentTransaction()
	return bau
}

// RemoveSentTransactionIDs removes the "sent_transaction" edge to Transaction entities by IDs.
func (bau *BankAccountUpdate) RemoveSentTransactionIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.RemoveSentTransactionIDs(ids...)
	return bau
}

// RemoveSentTransaction removes "sent_transaction" edges to Transaction entities.
func (bau *BankAccountUpdate) RemoveSentTransaction(t ...*Transaction) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bau.RemoveSentTransactionIDs(ids...)
}

// ClearReceivedTransaction clears all "received_transaction" edges to the Transaction entity.
func (bau *BankAccountUpdate) ClearReceivedTransaction() *BankAccountUpdate {
	bau.mutation.ClearReceivedTransaction()
	return bau
}

// RemoveReceivedTransactionIDs removes the "received_transaction" edge to Transaction entities by IDs.
func (bau *BankAccountUpdate) RemoveReceivedTransactionIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.RemoveReceivedTransactionIDs(ids...)
	return bau
}

// RemoveReceivedTransaction removes "received_transaction" edges to Transaction entities.
func (bau *BankAccountUpdate) RemoveReceivedTransaction(t ...*Transaction) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bau.RemoveReceivedTransactionIDs(ids...)
}

// ClearOwnedDebts clears all "owned_debts" edges to the Debt entity.
func (bau *BankAccountUpdate) ClearOwnedDebts() *BankAccountUpdate {
	bau.mutation.ClearOwnedDebts()
	return bau
}

// RemoveOwnedDebtIDs removes the "owned_debts" edge to Debt entities by IDs.
func (bau *BankAccountUpdate) RemoveOwnedDebtIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.RemoveOwnedDebtIDs(ids...)
	return bau
}

// RemoveOwnedDebts removes "owned_debts" edges to Debt entities.
func (bau *BankAccountUpdate) RemoveOwnedDebts(d ...*Debt) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bau.RemoveOwnedDebtIDs(ids...)
}

// ClearReceivedDebts clears all "received_debts" edges to the Debt entity.
func (bau *BankAccountUpdate) ClearReceivedDebts() *BankAccountUpdate {
	bau.mutation.ClearReceivedDebts()
	return bau
}

// RemoveReceivedDebtIDs removes the "received_debts" edge to Debt entities by IDs.
func (bau *BankAccountUpdate) RemoveReceivedDebtIDs(ids ...uuid.UUID) *BankAccountUpdate {
	bau.mutation.RemoveReceivedDebtIDs(ids...)
	return bau
}

// RemoveReceivedDebts removes "received_debts" edges to Debt entities.
func (bau *BankAccountUpdate) RemoveReceivedDebts(d ...*Debt) *BankAccountUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bau.RemoveReceivedDebtIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BankAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bau.defaults()
	if len(bau.hooks) == 0 {
		if err = bau.check(); err != nil {
			return 0, err
		}
		affected, err = bau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bau.check(); err != nil {
				return 0, err
			}
			bau.mutation = mutation
			affected, err = bau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bau.hooks) - 1; i >= 0; i-- {
			if bau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BankAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BankAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BankAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bau *BankAccountUpdate) defaults() {
	if _, ok := bau.mutation.UpdateTime(); !ok {
		v := bankaccount.UpdateDefaultUpdateTime()
		bau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BankAccountUpdate) check() error {
	if v, ok := bau.mutation.CashIn(); ok {
		if err := bankaccount.CashInValidator(v); err != nil {
			return &ValidationError{Name: "cash_in", err: fmt.Errorf(`ent: validator failed for field "BankAccount.cash_in": %w`, err)}
		}
	}
	if v, ok := bau.mutation.CashOut(); ok {
		if err := bankaccount.CashOutValidator(v); err != nil {
			return &ValidationError{Name: "cash_out", err: fmt.Errorf(`ent: validator failed for field "BankAccount.cash_out": %w`, err)}
		}
	}
	if _, ok := bau.mutation.CustomerID(); bau.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BankAccount.customer"`)
	}
	return nil
}

func (bau *BankAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankaccount.Table,
			Columns: bankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bankaccount.FieldID,
			},
		},
	}
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.UpdateTime(); ok {
		_spec.SetField(bankaccount.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bau.mutation.CashIn(); ok {
		_spec.SetField(bankaccount.FieldCashIn, field.TypeFloat64, value)
	}
	if value, ok := bau.mutation.AddedCashIn(); ok {
		_spec.AddField(bankaccount.FieldCashIn, field.TypeFloat64, value)
	}
	if value, ok := bau.mutation.CashOut(); ok {
		_spec.SetField(bankaccount.FieldCashOut, field.TypeFloat64, value)
	}
	if value, ok := bau.mutation.AddedCashOut(); ok {
		_spec.AddField(bankaccount.FieldCashOut, field.TypeFloat64, value)
	}
	if value, ok := bau.mutation.IsForPayment(); ok {
		_spec.SetField(bankaccount.FieldIsForPayment, field.TypeBool, value)
	}
	if bau.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bankaccount.CustomerTable,
			Columns: []string{bankaccount.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bankaccount.CustomerTable,
			Columns: []string{bankaccount.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.SentTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedSentTransactionIDs(); len(nodes) > 0 && !bau.mutation.SentTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.SentTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.ReceivedTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedReceivedTransactionIDs(); len(nodes) > 0 && !bau.mutation.ReceivedTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.ReceivedTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.OwnedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedOwnedDebtsIDs(); len(nodes) > 0 && !bau.mutation.OwnedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.OwnedDebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.ReceivedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedReceivedDebtsIDs(); len(nodes) > 0 && !bau.mutation.ReceivedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.ReceivedDebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BankAccountUpdateOne is the builder for updating a single BankAccount entity.
type BankAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankAccountMutation
}

// SetUpdateTime sets the "update_time" field.
func (bauo *BankAccountUpdateOne) SetUpdateTime(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetUpdateTime(t)
	return bauo
}

// SetCustomerID sets the "customer_id" field.
func (bauo *BankAccountUpdateOne) SetCustomerID(u uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.SetCustomerID(u)
	return bauo
}

// SetCashIn sets the "cash_in" field.
func (bauo *BankAccountUpdateOne) SetCashIn(f float64) *BankAccountUpdateOne {
	bauo.mutation.ResetCashIn()
	bauo.mutation.SetCashIn(f)
	return bauo
}

// AddCashIn adds f to the "cash_in" field.
func (bauo *BankAccountUpdateOne) AddCashIn(f float64) *BankAccountUpdateOne {
	bauo.mutation.AddCashIn(f)
	return bauo
}

// SetCashOut sets the "cash_out" field.
func (bauo *BankAccountUpdateOne) SetCashOut(f float64) *BankAccountUpdateOne {
	bauo.mutation.ResetCashOut()
	bauo.mutation.SetCashOut(f)
	return bauo
}

// AddCashOut adds f to the "cash_out" field.
func (bauo *BankAccountUpdateOne) AddCashOut(f float64) *BankAccountUpdateOne {
	bauo.mutation.AddCashOut(f)
	return bauo
}

// SetIsForPayment sets the "is_for_payment" field.
func (bauo *BankAccountUpdateOne) SetIsForPayment(b bool) *BankAccountUpdateOne {
	bauo.mutation.SetIsForPayment(b)
	return bauo
}

// SetNillableIsForPayment sets the "is_for_payment" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableIsForPayment(b *bool) *BankAccountUpdateOne {
	if b != nil {
		bauo.SetIsForPayment(*b)
	}
	return bauo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bauo *BankAccountUpdateOne) SetCustomer(c *Customer) *BankAccountUpdateOne {
	return bauo.SetCustomerID(c.ID)
}

// AddSentTransactionIDs adds the "sent_transaction" edge to the Transaction entity by IDs.
func (bauo *BankAccountUpdateOne) AddSentTransactionIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.AddSentTransactionIDs(ids...)
	return bauo
}

// AddSentTransaction adds the "sent_transaction" edges to the Transaction entity.
func (bauo *BankAccountUpdateOne) AddSentTransaction(t ...*Transaction) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bauo.AddSentTransactionIDs(ids...)
}

// AddReceivedTransactionIDs adds the "received_transaction" edge to the Transaction entity by IDs.
func (bauo *BankAccountUpdateOne) AddReceivedTransactionIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.AddReceivedTransactionIDs(ids...)
	return bauo
}

// AddReceivedTransaction adds the "received_transaction" edges to the Transaction entity.
func (bauo *BankAccountUpdateOne) AddReceivedTransaction(t ...*Transaction) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bauo.AddReceivedTransactionIDs(ids...)
}

// AddOwnedDebtIDs adds the "owned_debts" edge to the Debt entity by IDs.
func (bauo *BankAccountUpdateOne) AddOwnedDebtIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.AddOwnedDebtIDs(ids...)
	return bauo
}

// AddOwnedDebts adds the "owned_debts" edges to the Debt entity.
func (bauo *BankAccountUpdateOne) AddOwnedDebts(d ...*Debt) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bauo.AddOwnedDebtIDs(ids...)
}

// AddReceivedDebtIDs adds the "received_debts" edge to the Debt entity by IDs.
func (bauo *BankAccountUpdateOne) AddReceivedDebtIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.AddReceivedDebtIDs(ids...)
	return bauo
}

// AddReceivedDebts adds the "received_debts" edges to the Debt entity.
func (bauo *BankAccountUpdateOne) AddReceivedDebts(d ...*Debt) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bauo.AddReceivedDebtIDs(ids...)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bauo *BankAccountUpdateOne) Mutation() *BankAccountMutation {
	return bauo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bauo *BankAccountUpdateOne) ClearCustomer() *BankAccountUpdateOne {
	bauo.mutation.ClearCustomer()
	return bauo
}

// ClearSentTransaction clears all "sent_transaction" edges to the Transaction entity.
func (bauo *BankAccountUpdateOne) ClearSentTransaction() *BankAccountUpdateOne {
	bauo.mutation.ClearSentTransaction()
	return bauo
}

// RemoveSentTransactionIDs removes the "sent_transaction" edge to Transaction entities by IDs.
func (bauo *BankAccountUpdateOne) RemoveSentTransactionIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.RemoveSentTransactionIDs(ids...)
	return bauo
}

// RemoveSentTransaction removes "sent_transaction" edges to Transaction entities.
func (bauo *BankAccountUpdateOne) RemoveSentTransaction(t ...*Transaction) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bauo.RemoveSentTransactionIDs(ids...)
}

// ClearReceivedTransaction clears all "received_transaction" edges to the Transaction entity.
func (bauo *BankAccountUpdateOne) ClearReceivedTransaction() *BankAccountUpdateOne {
	bauo.mutation.ClearReceivedTransaction()
	return bauo
}

// RemoveReceivedTransactionIDs removes the "received_transaction" edge to Transaction entities by IDs.
func (bauo *BankAccountUpdateOne) RemoveReceivedTransactionIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.RemoveReceivedTransactionIDs(ids...)
	return bauo
}

// RemoveReceivedTransaction removes "received_transaction" edges to Transaction entities.
func (bauo *BankAccountUpdateOne) RemoveReceivedTransaction(t ...*Transaction) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bauo.RemoveReceivedTransactionIDs(ids...)
}

// ClearOwnedDebts clears all "owned_debts" edges to the Debt entity.
func (bauo *BankAccountUpdateOne) ClearOwnedDebts() *BankAccountUpdateOne {
	bauo.mutation.ClearOwnedDebts()
	return bauo
}

// RemoveOwnedDebtIDs removes the "owned_debts" edge to Debt entities by IDs.
func (bauo *BankAccountUpdateOne) RemoveOwnedDebtIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.RemoveOwnedDebtIDs(ids...)
	return bauo
}

// RemoveOwnedDebts removes "owned_debts" edges to Debt entities.
func (bauo *BankAccountUpdateOne) RemoveOwnedDebts(d ...*Debt) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bauo.RemoveOwnedDebtIDs(ids...)
}

// ClearReceivedDebts clears all "received_debts" edges to the Debt entity.
func (bauo *BankAccountUpdateOne) ClearReceivedDebts() *BankAccountUpdateOne {
	bauo.mutation.ClearReceivedDebts()
	return bauo
}

// RemoveReceivedDebtIDs removes the "received_debts" edge to Debt entities by IDs.
func (bauo *BankAccountUpdateOne) RemoveReceivedDebtIDs(ids ...uuid.UUID) *BankAccountUpdateOne {
	bauo.mutation.RemoveReceivedDebtIDs(ids...)
	return bauo
}

// RemoveReceivedDebts removes "received_debts" edges to Debt entities.
func (bauo *BankAccountUpdateOne) RemoveReceivedDebts(d ...*Debt) *BankAccountUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bauo.RemoveReceivedDebtIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BankAccountUpdateOne) Select(field string, fields ...string) *BankAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BankAccount entity.
func (bauo *BankAccountUpdateOne) Save(ctx context.Context) (*BankAccount, error) {
	var (
		err  error
		node *BankAccount
	)
	bauo.defaults()
	if len(bauo.hooks) == 0 {
		if err = bauo.check(); err != nil {
			return nil, err
		}
		node, err = bauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bauo.check(); err != nil {
				return nil, err
			}
			bauo.mutation = mutation
			node, err = bauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bauo.hooks) - 1; i >= 0; i-- {
			if bauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BankAccount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BankAccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) SaveX(ctx context.Context) *BankAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BankAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bauo *BankAccountUpdateOne) defaults() {
	if _, ok := bauo.mutation.UpdateTime(); !ok {
		v := bankaccount.UpdateDefaultUpdateTime()
		bauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BankAccountUpdateOne) check() error {
	if v, ok := bauo.mutation.CashIn(); ok {
		if err := bankaccount.CashInValidator(v); err != nil {
			return &ValidationError{Name: "cash_in", err: fmt.Errorf(`ent: validator failed for field "BankAccount.cash_in": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.CashOut(); ok {
		if err := bankaccount.CashOutValidator(v); err != nil {
			return &ValidationError{Name: "cash_out", err: fmt.Errorf(`ent: validator failed for field "BankAccount.cash_out": %w`, err)}
		}
	}
	if _, ok := bauo.mutation.CustomerID(); bauo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BankAccount.customer"`)
	}
	return nil
}

func (bauo *BankAccountUpdateOne) sqlSave(ctx context.Context) (_node *BankAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankaccount.Table,
			Columns: bankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bankaccount.FieldID,
			},
		},
	}
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BankAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bankaccount.FieldID)
		for _, f := range fields {
			if !bankaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.UpdateTime(); ok {
		_spec.SetField(bankaccount.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bauo.mutation.CashIn(); ok {
		_spec.SetField(bankaccount.FieldCashIn, field.TypeFloat64, value)
	}
	if value, ok := bauo.mutation.AddedCashIn(); ok {
		_spec.AddField(bankaccount.FieldCashIn, field.TypeFloat64, value)
	}
	if value, ok := bauo.mutation.CashOut(); ok {
		_spec.SetField(bankaccount.FieldCashOut, field.TypeFloat64, value)
	}
	if value, ok := bauo.mutation.AddedCashOut(); ok {
		_spec.AddField(bankaccount.FieldCashOut, field.TypeFloat64, value)
	}
	if value, ok := bauo.mutation.IsForPayment(); ok {
		_spec.SetField(bankaccount.FieldIsForPayment, field.TypeBool, value)
	}
	if bauo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bankaccount.CustomerTable,
			Columns: []string{bankaccount.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   bankaccount.CustomerTable,
			Columns: []string{bankaccount.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.SentTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedSentTransactionIDs(); len(nodes) > 0 && !bauo.mutation.SentTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.SentTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.SentTransactionTable,
			Columns: []string{bankaccount.SentTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.ReceivedTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedReceivedTransactionIDs(); len(nodes) > 0 && !bauo.mutation.ReceivedTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.ReceivedTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedTransactionTable,
			Columns: []string{bankaccount.ReceivedTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.OwnedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedOwnedDebtsIDs(); len(nodes) > 0 && !bauo.mutation.OwnedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.OwnedDebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.OwnedDebtsTable,
			Columns: []string{bankaccount.OwnedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.ReceivedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedReceivedDebtsIDs(); len(nodes) > 0 && !bauo.mutation.ReceivedDebtsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.ReceivedDebtsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   bankaccount.ReceivedDebtsTable,
			Columns: []string{bankaccount.ReceivedDebtsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BankAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
