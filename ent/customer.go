// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/TcMits/wnc-final/ent/customer"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// JwtTokenKey holds the value of the "jwt_token_key" field.
	JwtTokenKey string `json:"-"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Required. 128 characters or fewer. Letters, digits only.
	Username string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges CustomerEdges `json:"edges"`
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// BankAccounts holds the value of the bank_accounts edge.
	BankAccounts []*BankAccount `json:"bank_accounts,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BankAccountsOrErr returns the BankAccounts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) BankAccountsOrErr() ([]*BankAccount, error) {
	if e.loadedTypes[0] {
		return e.BankAccounts, nil
	}
	return nil, &NotLoadedError{edge: "bank_accounts"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldIsActive:
			values[i] = new(sql.NullBool)
		case customer.FieldJwtTokenKey, customer.FieldPassword, customer.FieldUsername, customer.FieldFirstName, customer.FieldLastName, customer.FieldPhoneNumber, customer.FieldEmail:
			values[i] = new(sql.NullString)
		case customer.FieldCreateTime, customer.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case customer.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Customer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case customer.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case customer.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case customer.FieldJwtTokenKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jwt_token_key", values[i])
			} else if value.Valid {
				c.JwtTokenKey = value.String
			}
		case customer.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				c.Password = value.String
			}
		case customer.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				c.Username = value.String
			}
		case customer.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				c.FirstName = value.String
			}
		case customer.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				c.LastName = value.String
			}
		case customer.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				c.PhoneNumber = value.String
			}
		case customer.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case customer.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				c.IsActive = value.Bool
			}
		}
	}
	return nil
}

// QueryBankAccounts queries the "bank_accounts" edge of the Customer entity.
func (c *Customer) QueryBankAccounts() *BankAccountQuery {
	return (&CustomerClient{config: c.config}).QueryBankAccounts(c)
}

// QueryContacts queries the "contacts" edge of the Customer entity.
func (c *Customer) QueryContacts() *ContactQuery {
	return (&CustomerClient{config: c.config}).QueryContacts(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return (&CustomerClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("jwt_token_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(c.Username)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(c.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(c.LastName)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(c.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", c.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

type CustomerCreateRepository struct {
	client   *Client
	isAtomic bool
}

func NewCustomerCreateRepository(
	client *Client,
	isAtomic bool,
) *CustomerCreateRepository {
	return &CustomerCreateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *CustomerCreateRepository) CreateWithClient(
	ctx context.Context, client *Client, input *CustomerCreateInput,
) (*Customer, error) {
	instance, err := client.Customer.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

func (r *CustomerCreateRepository) Create(
	ctx context.Context, input *CustomerCreateInput,
) (*Customer, error) {
	if !r.isAtomic {
		return r.CreateWithClient(ctx, r.client, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err := r.CreateWithClient(ctx, tx.Client(), input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

type CustomerDeleteRepository struct {
	client   *Client
	isAtomic bool
}

func NewCustomerDeleteRepository(
	client *Client,
	isAtomic bool,
) *CustomerDeleteRepository {
	return &CustomerDeleteRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *CustomerDeleteRepository) DeleteWithClient(
	ctx context.Context, client *Client, instance *Customer,
) error {
	err := client.Customer.DeleteOne(instance).Exec(ctx)
	if err != nil {
		return err
	}
	return nil
}

func (r *CustomerDeleteRepository) Delete(
	ctx context.Context, instance *Customer,
) error {
	if !r.isAtomic {
		return r.DeleteWithClient(ctx, r.client, instance)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return err
	}
	err = r.DeleteWithClient(ctx, tx.Client(), instance)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

// CustomerCreateInput represents a mutation input for creating customers.
type CustomerCreateInput struct {
	CreateTime     *time.Time  `json:"create_time,omitempty" form:"create_time"`
	UpdateTime     *time.Time  `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey    *string     `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	Password       *string     `json:"password,omitempty" form:"password"`
	Username       string      `json:"username,omitempty" form:"username"`
	FirstName      *string     `json:"first_name,omitempty" form:"first_name"`
	LastName       *string     `json:"last_name,omitempty" form:"last_name"`
	PhoneNumber    string      `json:"phone_number,omitempty" form:"phone_number"`
	Email          string      `json:"email,omitempty" form:"email"`
	IsActive       *bool       `json:"is_active,omitempty" form:"is_active"`
	BankAccountIDs []uuid.UUID `json:"bank_account_ids,omitempty" form:"bank_account_ids"`
	ContactIDs     []uuid.UUID `json:"contact_ids,omitempty" form:"contact_ids"`
}

// Mutate applies the CustomerCreateInput on the CustomerCreate builder.
func (i *CustomerCreateInput) Mutate(m *CustomerMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	m.SetUsername(i.Username)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetEmail(i.Email)
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if ids := i.BankAccountIDs; len(ids) > 0 {
		m.AddBankAccountIDs(ids...)
	}
	if ids := i.ContactIDs; len(ids) > 0 {
		m.AddContactIDs(ids...)
	}
}

// SetInput applies the change-set in the CustomerCreateInput on the create builder.
func (c *CustomerCreate) SetInput(i *CustomerCreateInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// CustomerUpdateInput represents a mutation input for updating customers.
type CustomerUpdateInput struct {
	ID                   uuid.UUID
	UpdateTime           *time.Time `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey          *string    `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	ClearJwtTokenKey     bool
	Password             *string `json:"password,omitempty" form:"password"`
	ClearPassword        bool
	Username             *string `json:"username,omitempty" form:"username"`
	FirstName            *string `json:"first_name,omitempty" form:"first_name"`
	ClearFirstName       bool
	LastName             *string `json:"last_name,omitempty" form:"last_name"`
	ClearLastName        bool
	PhoneNumber          *string `json:"phone_number,omitempty" form:"phone_number"`
	Email                *string `json:"email,omitempty" form:"email"`
	IsActive             *bool   `json:"is_active,omitempty" form:"is_active"`
	ClearIsActive        bool
	AddBankAccountIDs    []uuid.UUID `json:"add_bank_account_ids,omitempty" form:"add_bank_account_ids"`
	RemoveBankAccountIDs []uuid.UUID `json:"remove_bank_account_ids,omitempty" form:"remove_bank_account_ids"`
	AddContactIDs        []uuid.UUID `json:"add_contact_ids,omitempty" form:"add_contact_ids"`
	RemoveContactIDs     []uuid.UUID `json:"remove_contact_ids,omitempty" form:"remove_contact_ids"`
}

// Mutate applies the CustomerUpdateInput on the CustomerMutation.
func (i *CustomerUpdateInput) Mutate(m *CustomerMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearJwtTokenKey {
		m.ClearJwtTokenKey()
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearIsActive {
		m.ClearIsActive()
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if ids := i.AddBankAccountIDs; len(ids) > 0 {
		m.AddBankAccountIDs(ids...)
	}
	if ids := i.RemoveBankAccountIDs; len(ids) > 0 {
		m.RemoveBankAccountIDs(ids...)
	}
	if ids := i.AddContactIDs; len(ids) > 0 {
		m.AddContactIDs(ids...)
	}
	if ids := i.RemoveContactIDs; len(ids) > 0 {
		m.RemoveContactIDs(ids...)
	}
}

// SetInput applies the change-set in the CustomerUpdateInput on the update builder.
func (u *CustomerUpdate) SetInput(i *CustomerUpdateInput) *CustomerUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the CustomerUpdateInput on the update-one builder.
func (u *CustomerUpdateOne) SetInput(i *CustomerUpdateInput) *CustomerUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

type CustomerReadRepository struct {
	client *Client
}

func NewCustomerReadRepository(
	client *Client,
) *CustomerReadRepository {
	return &CustomerReadRepository{
		client: client,
	}
}

func (r *CustomerReadRepository) prepareQuery(
	client *Client, limit *int, offset *int, o *CustomerOrderInput, w *CustomerWhereInput,
) (*CustomerQuery, error) {
	var err error
	q := r.client.Customer.Query()
	if limit != nil {
		q = q.Limit(*limit)
	}
	if offset != nil {
		q = q.Offset(*offset)
	}
	if o != nil {
		q = o.Order(q)
	}
	if w != nil {
		q, err = w.Filter(q)
		if err != nil {
			return nil, err
		}
	}
	return q, nil
}

// using in Tx
func (r *CustomerReadRepository) GetWithClient(
	ctx context.Context, client *Client, w *CustomerWhereInput, forUpdate bool,
) (*Customer, error) {
	q, err := r.prepareQuery(client, nil, nil, nil, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instance, err := q.Only(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

// using in Tx
func (r *CustomerReadRepository) ListWithClient(
	ctx context.Context, client *Client, limit *int, offset *int, o *CustomerOrderInput, w *CustomerWhereInput, forUpdate bool,
) ([]*Customer, error) {
	q, err := r.prepareQuery(client, limit, offset, o, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instances, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (r *CustomerReadRepository) Count(ctx context.Context, w *CustomerWhereInput) (int, error) {
	q, err := r.prepareQuery(r.client, nil, nil, nil, w)
	if err != nil {
		return 0, err
	}
	count, err := q.Count(ctx)
	if err != nil {
		return 0, err
	}
	return count, nil
}

func (r *CustomerReadRepository) Get(ctx context.Context, w *CustomerWhereInput) (*Customer, error) {
	return r.GetWithClient(ctx, r.client, w, false)
}

func (r *CustomerReadRepository) List(
	ctx context.Context, limit *int, offset *int, o *CustomerOrderInput, w *CustomerWhereInput,
) ([]*Customer, error) {
	return r.ListWithClient(ctx, r.client, limit, offset, o, w, false)
}

type CustomerSerializer struct {
	columns map[string]func(context.Context, *Customer) any
}

func NewCustomerSerializer(customColumns map[string]func(context.Context, *Customer) any, columns ...string) *CustomerSerializer {
	columnsMap := map[string]func(context.Context, *Customer) any{}
	for _, col := range columns {
		switch col {

		case customer.FieldID:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.ID
			}

		case customer.FieldCreateTime:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.CreateTime
			}

		case customer.FieldUpdateTime:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.UpdateTime
			}

		case customer.FieldJwtTokenKey:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.JwtTokenKey
			}

		case customer.FieldPassword:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.Password
			}

		case customer.FieldUsername:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.Username
			}

		case customer.FieldFirstName:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.FirstName
			}

		case customer.FieldLastName:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.LastName
			}

		case customer.FieldPhoneNumber:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.PhoneNumber
			}

		case customer.FieldEmail:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.Email
			}

		case customer.FieldIsActive:
			columnsMap[col] = func(ctx context.Context, c *Customer) any {
				return c.IsActive
			}

		default:
			panic(fmt.Sprintf("Unexpect column %s", col))
		}
	}

	for k, serializeFunc := range customColumns {
		columnsMap[k] = serializeFunc
	}

	return &CustomerSerializer{
		columns: columnsMap,
	}
}

func (s *CustomerSerializer) Serialize(ctx context.Context, c *Customer) map[string]any {
	result := make(map[string]any, len(s.columns))
	for col, serializeFunc := range s.columns {
		result[col] = serializeFunc(ctx, c)
	}
	return result
}

type CustomerUpdateRepository struct {
	client   *Client
	isAtomic bool
}

func NewCustomerUpdateRepository(
	client *Client,
	isAtomic bool,
) *CustomerUpdateRepository {
	return &CustomerUpdateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *CustomerUpdateRepository) UpdateWithClient(
	ctx context.Context, client *Client, instance *Customer, input *CustomerUpdateInput,
) (*Customer, error) {
	newInstance, err := client.Customer.UpdateOne(instance).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return newInstance, nil
}

func (r *CustomerUpdateRepository) Update(
	ctx context.Context, instance *Customer, input *CustomerUpdateInput,
) (*Customer, error) {
	if !r.isAtomic {
		return r.UpdateWithClient(ctx, r.client, instance, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err = r.UpdateWithClient(ctx, tx.Client(), instance, input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

// CustomerWhereInput represents a where input for filtering Customer queries.
type CustomerWhereInput struct {
	Predicates []predicate.Customer  `json:"-"`
	Not        *CustomerWhereInput   `json:"not,omitempty"`
	Or         []*CustomerWhereInput `json:"or,omitempty"`
	And        []*CustomerWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty" form:"id" param:"id" url:"id"`
	IDNEQ   *uuid.UUID  `json:"id_neq,omitempty" form:"id_neq" param:"id_neq" url:"id_neq"`
	IDIn    []uuid.UUID `json:"id_in,omitempty" form:"id_in" param:"id_in" url:"id_in"`
	IDNotIn []uuid.UUID `json:"id_not_in,omitempty" form:"id_not_in" param:"id_not_in" url:"id_not_in"`
	IDGT    *uuid.UUID  `json:"id_gt,omitempty" form:"id_gt" param:"id_gt" url:"id_gt"`
	IDGTE   *uuid.UUID  `json:"id_gte,omitempty" form:"id_gte" param:"id_gte" url:"id_gte"`
	IDLT    *uuid.UUID  `json:"id_lt,omitempty" form:"id_lt" param:"id_lt" url:"id_lt"`
	IDLTE   *uuid.UUID  `json:"id_lte,omitempty" form:"id_lte" param:"id_lte" url:"id_lte"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"create_time,omitempty" form:"create_time" param:"create_time" url:"create_time"`
	CreateTimeNEQ   *time.Time  `json:"create_time_neq,omitempty" form:"create_time_neq" param:"create_time_neq" url:"create_time_neq"`
	CreateTimeIn    []time.Time `json:"create_time_in,omitempty" form:"create_time_in" param:"create_time_in" url:"create_time_in"`
	CreateTimeNotIn []time.Time `json:"create_time_not_in,omitempty" form:"create_time_not_in" param:"create_time_not_in" url:"create_time_not_in"`
	CreateTimeGT    *time.Time  `json:"create_time_gt,omitempty" form:"create_time_gt" param:"create_time_gt" url:"create_time_gt"`
	CreateTimeGTE   *time.Time  `json:"create_time_gte,omitempty" form:"create_time_gte" param:"create_time_gte" url:"create_time_gte"`
	CreateTimeLT    *time.Time  `json:"create_time_lt,omitempty" form:"create_time_lt" param:"create_time_lt" url:"create_time_lt"`
	CreateTimeLTE   *time.Time  `json:"create_time_lte,omitempty" form:"create_time_lte" param:"create_time_lte" url:"create_time_lte"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"update_time,omitempty" form:"update_time" param:"update_time" url:"update_time"`
	UpdateTimeNEQ   *time.Time  `json:"update_time_neq,omitempty" form:"update_time_neq" param:"update_time_neq" url:"update_time_neq"`
	UpdateTimeIn    []time.Time `json:"update_time_in,omitempty" form:"update_time_in" param:"update_time_in" url:"update_time_in"`
	UpdateTimeNotIn []time.Time `json:"update_time_not_in,omitempty" form:"update_time_not_in" param:"update_time_not_in" url:"update_time_not_in"`
	UpdateTimeGT    *time.Time  `json:"update_time_gt,omitempty" form:"update_time_gt" param:"update_time_gt" url:"update_time_gt"`
	UpdateTimeGTE   *time.Time  `json:"update_time_gte,omitempty" form:"update_time_gte" param:"update_time_gte" url:"update_time_gte"`
	UpdateTimeLT    *time.Time  `json:"update_time_lt,omitempty" form:"update_time_lt" param:"update_time_lt" url:"update_time_lt"`
	UpdateTimeLTE   *time.Time  `json:"update_time_lte,omitempty" form:"update_time_lte" param:"update_time_lte" url:"update_time_lte"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty" form:"username" param:"username" url:"username"`
	UsernameNEQ          *string  `json:"username_neq,omitempty" form:"username_neq" param:"username_neq" url:"username_neq"`
	UsernameIn           []string `json:"username_in,omitempty" form:"username_in" param:"username_in" url:"username_in"`
	UsernameNotIn        []string `json:"username_not_in,omitempty" form:"username_not_in" param:"username_not_in" url:"username_not_in"`
	UsernameGT           *string  `json:"username_gt,omitempty" form:"username_gt" param:"username_gt" url:"username_gt"`
	UsernameGTE          *string  `json:"username_gte,omitempty" form:"username_gte" param:"username_gte" url:"username_gte"`
	UsernameLT           *string  `json:"username_lt,omitempty" form:"username_lt" param:"username_lt" url:"username_lt"`
	UsernameLTE          *string  `json:"username_lte,omitempty" form:"username_lte" param:"username_lte" url:"username_lte"`
	UsernameContains     *string  `json:"username_contains,omitempty" form:"username_contains" param:"username_contains" url:"username_contains"`
	UsernameHasPrefix    *string  `json:"username_has_prefix,omitempty" form:"username_has_prefix" param:"username_has_prefix" url:"username_has_prefix"`
	UsernameHasSuffix    *string  `json:"username_has_suffix,omitempty" form:"username_has_suffix" param:"username_has_suffix" url:"username_has_suffix"`
	UsernameEqualFold    *string  `json:"username_equal_fold,omitempty" form:"username_equal_fold" param:"username_equal_fold" url:"username_equal_fold"`
	UsernameContainsFold *string  `json:"username_contains_fold,omitempty" form:"username_contains_fold" param:"username_contains_fold" url:"username_contains_fold"`

	// "first_name" field predicates.
	FirstName             *string  `json:"first_name,omitempty" form:"first_name" param:"first_name" url:"first_name"`
	FirstNameNEQ          *string  `json:"first_name_neq,omitempty" form:"first_name_neq" param:"first_name_neq" url:"first_name_neq"`
	FirstNameIn           []string `json:"first_name_in,omitempty" form:"first_name_in" param:"first_name_in" url:"first_name_in"`
	FirstNameNotIn        []string `json:"first_name_not_in,omitempty" form:"first_name_not_in" param:"first_name_not_in" url:"first_name_not_in"`
	FirstNameGT           *string  `json:"first_name_gt,omitempty" form:"first_name_gt" param:"first_name_gt" url:"first_name_gt"`
	FirstNameGTE          *string  `json:"first_name_gte,omitempty" form:"first_name_gte" param:"first_name_gte" url:"first_name_gte"`
	FirstNameLT           *string  `json:"first_name_lt,omitempty" form:"first_name_lt" param:"first_name_lt" url:"first_name_lt"`
	FirstNameLTE          *string  `json:"first_name_lte,omitempty" form:"first_name_lte" param:"first_name_lte" url:"first_name_lte"`
	FirstNameContains     *string  `json:"first_name_contains,omitempty" form:"first_name_contains" param:"first_name_contains" url:"first_name_contains"`
	FirstNameHasPrefix    *string  `json:"first_name_has_prefix,omitempty" form:"first_name_has_prefix" param:"first_name_has_prefix" url:"first_name_has_prefix"`
	FirstNameHasSuffix    *string  `json:"first_name_has_suffix,omitempty" form:"first_name_has_suffix" param:"first_name_has_suffix" url:"first_name_has_suffix"`
	FirstNameIsNil        bool     `json:"first_name_is_nil,omitempty" form:"first_name_is_nil" param:"first_name_is_nil" url:"first_name_is_nil"`
	FirstNameNotNil       bool     `json:"first_name_not_nil,omitempty" form:"first_name_not_nil" param:"first_name_not_nil" url:"first_name_not_nil"`
	FirstNameEqualFold    *string  `json:"first_name_equal_fold,omitempty" form:"first_name_equal_fold" param:"first_name_equal_fold" url:"first_name_equal_fold"`
	FirstNameContainsFold *string  `json:"first_name_contains_fold,omitempty" form:"first_name_contains_fold" param:"first_name_contains_fold" url:"first_name_contains_fold"`

	// "last_name" field predicates.
	LastName             *string  `json:"last_name,omitempty" form:"last_name" param:"last_name" url:"last_name"`
	LastNameNEQ          *string  `json:"last_name_neq,omitempty" form:"last_name_neq" param:"last_name_neq" url:"last_name_neq"`
	LastNameIn           []string `json:"last_name_in,omitempty" form:"last_name_in" param:"last_name_in" url:"last_name_in"`
	LastNameNotIn        []string `json:"last_name_not_in,omitempty" form:"last_name_not_in" param:"last_name_not_in" url:"last_name_not_in"`
	LastNameGT           *string  `json:"last_name_gt,omitempty" form:"last_name_gt" param:"last_name_gt" url:"last_name_gt"`
	LastNameGTE          *string  `json:"last_name_gte,omitempty" form:"last_name_gte" param:"last_name_gte" url:"last_name_gte"`
	LastNameLT           *string  `json:"last_name_lt,omitempty" form:"last_name_lt" param:"last_name_lt" url:"last_name_lt"`
	LastNameLTE          *string  `json:"last_name_lte,omitempty" form:"last_name_lte" param:"last_name_lte" url:"last_name_lte"`
	LastNameContains     *string  `json:"last_name_contains,omitempty" form:"last_name_contains" param:"last_name_contains" url:"last_name_contains"`
	LastNameHasPrefix    *string  `json:"last_name_has_prefix,omitempty" form:"last_name_has_prefix" param:"last_name_has_prefix" url:"last_name_has_prefix"`
	LastNameHasSuffix    *string  `json:"last_name_has_suffix,omitempty" form:"last_name_has_suffix" param:"last_name_has_suffix" url:"last_name_has_suffix"`
	LastNameIsNil        bool     `json:"last_name_is_nil,omitempty" form:"last_name_is_nil" param:"last_name_is_nil" url:"last_name_is_nil"`
	LastNameNotNil       bool     `json:"last_name_not_nil,omitempty" form:"last_name_not_nil" param:"last_name_not_nil" url:"last_name_not_nil"`
	LastNameEqualFold    *string  `json:"last_name_equal_fold,omitempty" form:"last_name_equal_fold" param:"last_name_equal_fold" url:"last_name_equal_fold"`
	LastNameContainsFold *string  `json:"last_name_contains_fold,omitempty" form:"last_name_contains_fold" param:"last_name_contains_fold" url:"last_name_contains_fold"`

	// "phone_number" field predicates.
	PhoneNumber             *string  `json:"phone_number,omitempty" form:"phone_number" param:"phone_number" url:"phone_number"`
	PhoneNumberNEQ          *string  `json:"phone_number_neq,omitempty" form:"phone_number_neq" param:"phone_number_neq" url:"phone_number_neq"`
	PhoneNumberIn           []string `json:"phone_number_in,omitempty" form:"phone_number_in" param:"phone_number_in" url:"phone_number_in"`
	PhoneNumberNotIn        []string `json:"phone_number_not_in,omitempty" form:"phone_number_not_in" param:"phone_number_not_in" url:"phone_number_not_in"`
	PhoneNumberGT           *string  `json:"phone_number_gt,omitempty" form:"phone_number_gt" param:"phone_number_gt" url:"phone_number_gt"`
	PhoneNumberGTE          *string  `json:"phone_number_gte,omitempty" form:"phone_number_gte" param:"phone_number_gte" url:"phone_number_gte"`
	PhoneNumberLT           *string  `json:"phone_number_lt,omitempty" form:"phone_number_lt" param:"phone_number_lt" url:"phone_number_lt"`
	PhoneNumberLTE          *string  `json:"phone_number_lte,omitempty" form:"phone_number_lte" param:"phone_number_lte" url:"phone_number_lte"`
	PhoneNumberContains     *string  `json:"phone_number_contains,omitempty" form:"phone_number_contains" param:"phone_number_contains" url:"phone_number_contains"`
	PhoneNumberHasPrefix    *string  `json:"phone_number_has_prefix,omitempty" form:"phone_number_has_prefix" param:"phone_number_has_prefix" url:"phone_number_has_prefix"`
	PhoneNumberHasSuffix    *string  `json:"phone_number_has_suffix,omitempty" form:"phone_number_has_suffix" param:"phone_number_has_suffix" url:"phone_number_has_suffix"`
	PhoneNumberEqualFold    *string  `json:"phone_number_equal_fold,omitempty" form:"phone_number_equal_fold" param:"phone_number_equal_fold" url:"phone_number_equal_fold"`
	PhoneNumberContainsFold *string  `json:"phone_number_contains_fold,omitempty" form:"phone_number_contains_fold" param:"phone_number_contains_fold" url:"phone_number_contains_fold"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty" form:"email" param:"email" url:"email"`
	EmailNEQ          *string  `json:"email_neq,omitempty" form:"email_neq" param:"email_neq" url:"email_neq"`
	EmailIn           []string `json:"email_in,omitempty" form:"email_in" param:"email_in" url:"email_in"`
	EmailNotIn        []string `json:"email_not_in,omitempty" form:"email_not_in" param:"email_not_in" url:"email_not_in"`
	EmailGT           *string  `json:"email_gt,omitempty" form:"email_gt" param:"email_gt" url:"email_gt"`
	EmailGTE          *string  `json:"email_gte,omitempty" form:"email_gte" param:"email_gte" url:"email_gte"`
	EmailLT           *string  `json:"email_lt,omitempty" form:"email_lt" param:"email_lt" url:"email_lt"`
	EmailLTE          *string  `json:"email_lte,omitempty" form:"email_lte" param:"email_lte" url:"email_lte"`
	EmailContains     *string  `json:"email_contains,omitempty" form:"email_contains" param:"email_contains" url:"email_contains"`
	EmailHasPrefix    *string  `json:"email_has_prefix,omitempty" form:"email_has_prefix" param:"email_has_prefix" url:"email_has_prefix"`
	EmailHasSuffix    *string  `json:"email_has_suffix,omitempty" form:"email_has_suffix" param:"email_has_suffix" url:"email_has_suffix"`
	EmailEqualFold    *string  `json:"email_equal_fold,omitempty" form:"email_equal_fold" param:"email_equal_fold" url:"email_equal_fold"`
	EmailContainsFold *string  `json:"email_contains_fold,omitempty" form:"email_contains_fold" param:"email_contains_fold" url:"email_contains_fold"`

	// "is_active" field predicates.
	IsActive       *bool `json:"is_active,omitempty" form:"is_active" param:"is_active" url:"is_active"`
	IsActiveNEQ    *bool `json:"is_active_neq,omitempty" form:"is_active_neq" param:"is_active_neq" url:"is_active_neq"`
	IsActiveIsNil  bool  `json:"is_active_is_nil,omitempty" form:"is_active_is_nil" param:"is_active_is_nil" url:"is_active_is_nil"`
	IsActiveNotNil bool  `json:"is_active_not_nil,omitempty" form:"is_active_not_nil" param:"is_active_not_nil" url:"is_active_not_nil"`

	// "bank_accounts" edge predicates.
	HasBankAccounts     *bool                    `json:"has_bank_accounts,omitempty" form:"has_bank_accounts" param:"has_bank_accounts" url:"has_bank_accounts"`
	HasBankAccountsWith []*BankAccountWhereInput `json:"has_bank_accounts_with,omitempty" form:"has_bank_accounts_with" param:"has_bank_accounts_with" url:"has_bank_accounts_with"`

	// "contacts" edge predicates.
	HasContacts     *bool                `json:"has_contacts,omitempty" form:"has_contacts" param:"has_contacts" url:"has_contacts"`
	HasContactsWith []*ContactWhereInput `json:"has_contacts_with,omitempty" form:"has_contacts_with" param:"has_contacts_with" url:"has_contacts_with"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CustomerWhereInput) AddPredicates(predicates ...predicate.Customer) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CustomerWhereInput filter on the CustomerQuery builder.
func (i *CustomerWhereInput) Filter(q *CustomerQuery) (*CustomerQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCustomerWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCustomerWhereInput is returned in case the CustomerWhereInput is empty.
var ErrEmptyCustomerWhereInput = errors.New("ent: empty predicate CustomerWhereInput")

// P returns a predicate for filtering customers.
// An error is returned if the input is empty or invalid.
func (i *CustomerWhereInput) P() (predicate.Customer, error) {
	var predicates []predicate.Customer
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, customer.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Customer, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, customer.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Customer, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, customer.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, customer.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, customer.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, customer.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, customer.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, customer.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, customer.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, customer.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, customer.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, customer.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, customer.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, customer.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, customer.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, customer.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, customer.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, customer.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, customer.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, customer.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, customer.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, customer.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, customer.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, customer.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, customer.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, customer.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, customer.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, customer.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, customer.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, customer.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, customer.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, customer.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, customer.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, customer.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, customer.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, customer.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, customer.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, customer.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, customer.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, customer.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.FirstName != nil {
		predicates = append(predicates, customer.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, customer.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, customer.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, customer.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, customer.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, customer.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, customer.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, customer.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, customer.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, customer.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, customer.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameIsNil {
		predicates = append(predicates, customer.FirstNameIsNil())
	}
	if i.FirstNameNotNil {
		predicates = append(predicates, customer.FirstNameNotNil())
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, customer.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, customer.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, customer.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, customer.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, customer.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, customer.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, customer.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, customer.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, customer.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, customer.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, customer.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, customer.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, customer.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameIsNil {
		predicates = append(predicates, customer.LastNameIsNil())
	}
	if i.LastNameNotNil {
		predicates = append(predicates, customer.LastNameNotNil())
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, customer.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, customer.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.PhoneNumber != nil {
		predicates = append(predicates, customer.PhoneNumberEQ(*i.PhoneNumber))
	}
	if i.PhoneNumberNEQ != nil {
		predicates = append(predicates, customer.PhoneNumberNEQ(*i.PhoneNumberNEQ))
	}
	if len(i.PhoneNumberIn) > 0 {
		predicates = append(predicates, customer.PhoneNumberIn(i.PhoneNumberIn...))
	}
	if len(i.PhoneNumberNotIn) > 0 {
		predicates = append(predicates, customer.PhoneNumberNotIn(i.PhoneNumberNotIn...))
	}
	if i.PhoneNumberGT != nil {
		predicates = append(predicates, customer.PhoneNumberGT(*i.PhoneNumberGT))
	}
	if i.PhoneNumberGTE != nil {
		predicates = append(predicates, customer.PhoneNumberGTE(*i.PhoneNumberGTE))
	}
	if i.PhoneNumberLT != nil {
		predicates = append(predicates, customer.PhoneNumberLT(*i.PhoneNumberLT))
	}
	if i.PhoneNumberLTE != nil {
		predicates = append(predicates, customer.PhoneNumberLTE(*i.PhoneNumberLTE))
	}
	if i.PhoneNumberContains != nil {
		predicates = append(predicates, customer.PhoneNumberContains(*i.PhoneNumberContains))
	}
	if i.PhoneNumberHasPrefix != nil {
		predicates = append(predicates, customer.PhoneNumberHasPrefix(*i.PhoneNumberHasPrefix))
	}
	if i.PhoneNumberHasSuffix != nil {
		predicates = append(predicates, customer.PhoneNumberHasSuffix(*i.PhoneNumberHasSuffix))
	}
	if i.PhoneNumberEqualFold != nil {
		predicates = append(predicates, customer.PhoneNumberEqualFold(*i.PhoneNumberEqualFold))
	}
	if i.PhoneNumberContainsFold != nil {
		predicates = append(predicates, customer.PhoneNumberContainsFold(*i.PhoneNumberContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, customer.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, customer.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, customer.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, customer.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, customer.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, customer.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, customer.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, customer.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, customer.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, customer.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, customer.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, customer.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, customer.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.IsActive != nil {
		predicates = append(predicates, customer.IsActiveEQ(*i.IsActive))
	}
	if i.IsActiveNEQ != nil {
		predicates = append(predicates, customer.IsActiveNEQ(*i.IsActiveNEQ))
	}
	if i.IsActiveIsNil {
		predicates = append(predicates, customer.IsActiveIsNil())
	}
	if i.IsActiveNotNil {
		predicates = append(predicates, customer.IsActiveNotNil())
	}

	if i.HasBankAccounts != nil {
		p := customer.HasBankAccounts()
		if !*i.HasBankAccounts {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBankAccountsWith) > 0 {
		with := make([]predicate.BankAccount, 0, len(i.HasBankAccountsWith))
		for _, w := range i.HasBankAccountsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBankAccountsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasBankAccountsWith(with...))
	}
	if i.HasContacts != nil {
		p := customer.HasContacts()
		if !*i.HasContacts {
			p = customer.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactsWith) > 0 {
		with := make([]predicate.Contact, 0, len(i.HasContactsWith))
		for _, w := range i.HasContactsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, customer.HasContactsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCustomerWhereInput
	case 1:
		return predicates[0], nil
	default:
		return customer.And(predicates...), nil
	}
}

// Customers is a parsable slice of Customer.
type Customers []*Customer

func (c Customers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
