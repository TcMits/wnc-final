// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/contact"
	"github.com/TcMits/wnc-final/ent/customer"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CustomerUpdate) SetUpdateTime(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetJwtTokenKey sets the "jwt_token_key" field.
func (cu *CustomerUpdate) SetJwtTokenKey(s string) *CustomerUpdate {
	cu.mutation.SetJwtTokenKey(s)
	return cu
}

// SetNillableJwtTokenKey sets the "jwt_token_key" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableJwtTokenKey(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetJwtTokenKey(*s)
	}
	return cu
}

// ClearJwtTokenKey clears the value of the "jwt_token_key" field.
func (cu *CustomerUpdate) ClearJwtTokenKey() *CustomerUpdate {
	cu.mutation.ClearJwtTokenKey()
	return cu
}

// SetPassword sets the "password" field.
func (cu *CustomerUpdate) SetPassword(s string) *CustomerUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePassword(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPassword(*s)
	}
	return cu
}

// ClearPassword clears the value of the "password" field.
func (cu *CustomerUpdate) ClearPassword() *CustomerUpdate {
	cu.mutation.ClearPassword()
	return cu
}

// SetUsername sets the "username" field.
func (cu *CustomerUpdate) SetUsername(s string) *CustomerUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *CustomerUpdate) SetFirstName(s string) *CustomerUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableFirstName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// ClearFirstName clears the value of the "first_name" field.
func (cu *CustomerUpdate) ClearFirstName() *CustomerUpdate {
	cu.mutation.ClearFirstName()
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *CustomerUpdate) SetLastName(s string) *CustomerUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableLastName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// ClearLastName clears the value of the "last_name" field.
func (cu *CustomerUpdate) ClearLastName() *CustomerUpdate {
	cu.mutation.ClearLastName()
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CustomerUpdate) SetPhoneNumber(s string) *CustomerUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetIsActive sets the "is_active" field.
func (cu *CustomerUpdate) SetIsActive(b bool) *CustomerUpdate {
	cu.mutation.SetIsActive(b)
	return cu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIsActive(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetIsActive(*b)
	}
	return cu
}

// ClearIsActive clears the value of the "is_active" field.
func (cu *CustomerUpdate) ClearIsActive() *CustomerUpdate {
	cu.mutation.ClearIsActive()
	return cu
}

// AddBankAccountIDs adds the "bank_accounts" edge to the BankAccount entity by IDs.
func (cu *CustomerUpdate) AddBankAccountIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddBankAccountIDs(ids...)
	return cu
}

// AddBankAccounts adds the "bank_accounts" edges to the BankAccount entity.
func (cu *CustomerUpdate) AddBankAccounts(b ...*BankAccount) *CustomerUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBankAccountIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cu *CustomerUpdate) AddContactIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddContactIDs(ids...)
	return cu
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cu *CustomerUpdate) AddContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddContactIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearBankAccounts clears all "bank_accounts" edges to the BankAccount entity.
func (cu *CustomerUpdate) ClearBankAccounts() *CustomerUpdate {
	cu.mutation.ClearBankAccounts()
	return cu
}

// RemoveBankAccountIDs removes the "bank_accounts" edge to BankAccount entities by IDs.
func (cu *CustomerUpdate) RemoveBankAccountIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveBankAccountIDs(ids...)
	return cu
}

// RemoveBankAccounts removes "bank_accounts" edges to BankAccount entities.
func (cu *CustomerUpdate) RemoveBankAccounts(b ...*BankAccount) *CustomerUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBankAccountIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (cu *CustomerUpdate) ClearContacts() *CustomerUpdate {
	cu.mutation.ClearContacts()
	return cu
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (cu *CustomerUpdate) RemoveContactIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveContactIDs(ids...)
	return cu
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (cu *CustomerUpdate) RemoveContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := customer.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.FirstName(); ok {
		if err := customer.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Customer.first_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LastName(); ok {
		if err := customer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Customer.last_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: customer.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(customer.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.JwtTokenKey(); ok {
		_spec.SetField(customer.FieldJwtTokenKey, field.TypeString, value)
	}
	if cu.mutation.JwtTokenKeyCleared() {
		_spec.ClearField(customer.FieldJwtTokenKey, field.TypeString)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if cu.mutation.PasswordCleared() {
		_spec.ClearField(customer.FieldPassword, field.TypeString)
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(customer.FieldFirstName, field.TypeString, value)
	}
	if cu.mutation.FirstNameCleared() {
		_spec.ClearField(customer.FieldFirstName, field.TypeString)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if cu.mutation.LastNameCleared() {
		_spec.ClearField(customer.FieldLastName, field.TypeString)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if cu.mutation.IsActiveCleared() {
		_spec.ClearField(customer.FieldIsActive, field.TypeBool)
	}
	if cu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !cu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CustomerUpdateOne) SetUpdateTime(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetJwtTokenKey sets the "jwt_token_key" field.
func (cuo *CustomerUpdateOne) SetJwtTokenKey(s string) *CustomerUpdateOne {
	cuo.mutation.SetJwtTokenKey(s)
	return cuo
}

// SetNillableJwtTokenKey sets the "jwt_token_key" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableJwtTokenKey(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetJwtTokenKey(*s)
	}
	return cuo
}

// ClearJwtTokenKey clears the value of the "jwt_token_key" field.
func (cuo *CustomerUpdateOne) ClearJwtTokenKey() *CustomerUpdateOne {
	cuo.mutation.ClearJwtTokenKey()
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CustomerUpdateOne) SetPassword(s string) *CustomerUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePassword(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPassword(*s)
	}
	return cuo
}

// ClearPassword clears the value of the "password" field.
func (cuo *CustomerUpdateOne) ClearPassword() *CustomerUpdateOne {
	cuo.mutation.ClearPassword()
	return cuo
}

// SetUsername sets the "username" field.
func (cuo *CustomerUpdateOne) SetUsername(s string) *CustomerUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *CustomerUpdateOne) SetFirstName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableFirstName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// ClearFirstName clears the value of the "first_name" field.
func (cuo *CustomerUpdateOne) ClearFirstName() *CustomerUpdateOne {
	cuo.mutation.ClearFirstName()
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *CustomerUpdateOne) SetLastName(s string) *CustomerUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableLastName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// ClearLastName clears the value of the "last_name" field.
func (cuo *CustomerUpdateOne) ClearLastName() *CustomerUpdateOne {
	cuo.mutation.ClearLastName()
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CustomerUpdateOne) SetPhoneNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetIsActive sets the "is_active" field.
func (cuo *CustomerUpdateOne) SetIsActive(b bool) *CustomerUpdateOne {
	cuo.mutation.SetIsActive(b)
	return cuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIsActive(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetIsActive(*b)
	}
	return cuo
}

// ClearIsActive clears the value of the "is_active" field.
func (cuo *CustomerUpdateOne) ClearIsActive() *CustomerUpdateOne {
	cuo.mutation.ClearIsActive()
	return cuo
}

// AddBankAccountIDs adds the "bank_accounts" edge to the BankAccount entity by IDs.
func (cuo *CustomerUpdateOne) AddBankAccountIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddBankAccountIDs(ids...)
	return cuo
}

// AddBankAccounts adds the "bank_accounts" edges to the BankAccount entity.
func (cuo *CustomerUpdateOne) AddBankAccounts(b ...*BankAccount) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBankAccountIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cuo *CustomerUpdateOne) AddContactIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddContactIDs(ids...)
	return cuo
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) AddContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddContactIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearBankAccounts clears all "bank_accounts" edges to the BankAccount entity.
func (cuo *CustomerUpdateOne) ClearBankAccounts() *CustomerUpdateOne {
	cuo.mutation.ClearBankAccounts()
	return cuo
}

// RemoveBankAccountIDs removes the "bank_accounts" edge to BankAccount entities by IDs.
func (cuo *CustomerUpdateOne) RemoveBankAccountIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveBankAccountIDs(ids...)
	return cuo
}

// RemoveBankAccounts removes "bank_accounts" edges to BankAccount entities.
func (cuo *CustomerUpdateOne) RemoveBankAccounts(b ...*BankAccount) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBankAccountIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) ClearContacts() *CustomerUpdateOne {
	cuo.mutation.ClearContacts()
	return cuo
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (cuo *CustomerUpdateOne) RemoveContactIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveContactIDs(ids...)
	return cuo
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (cuo *CustomerUpdateOne) RemoveContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveContactIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	var (
		err  error
		node *Customer
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Customer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CustomerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := customer.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Password(); ok {
		if err := customer.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Customer.password": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Username(); ok {
		if err := customer.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Customer.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.FirstName(); ok {
		if err := customer.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Customer.first_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LastName(); ok {
		if err := customer.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Customer.last_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: customer.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(customer.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.JwtTokenKey(); ok {
		_spec.SetField(customer.FieldJwtTokenKey, field.TypeString, value)
	}
	if cuo.mutation.JwtTokenKeyCleared() {
		_spec.ClearField(customer.FieldJwtTokenKey, field.TypeString)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(customer.FieldPassword, field.TypeString, value)
	}
	if cuo.mutation.PasswordCleared() {
		_spec.ClearField(customer.FieldPassword, field.TypeString)
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(customer.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(customer.FieldFirstName, field.TypeString, value)
	}
	if cuo.mutation.FirstNameCleared() {
		_spec.ClearField(customer.FieldFirstName, field.TypeString)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(customer.FieldLastName, field.TypeString, value)
	}
	if cuo.mutation.LastNameCleared() {
		_spec.ClearField(customer.FieldLastName, field.TypeString)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsActive(); ok {
		_spec.SetField(customer.FieldIsActive, field.TypeBool, value)
	}
	if cuo.mutation.IsActiveCleared() {
		_spec.ClearField(customer.FieldIsActive, field.TypeBool)
	}
	if cuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !cuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.BankAccountsTable,
			Columns: []string{customer.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
