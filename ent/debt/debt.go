// Code generated by ent, DO NOT EDIT.

package debt

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the debt type in the database.
	Label = "debt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldOwnerBankAccountNumber holds the string denoting the owner_bank_account_number field in the database.
	FieldOwnerBankAccountNumber = "owner_bank_account_number"
	// FieldOwnerBankName holds the string denoting the owner_bank_name field in the database.
	FieldOwnerBankName = "owner_bank_name"
	// FieldOwnerName holds the string denoting the owner_name field in the database.
	FieldOwnerName = "owner_name"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldReceiverBankAccountNumber holds the string denoting the receiver_bank_account_number field in the database.
	FieldReceiverBankAccountNumber = "receiver_bank_account_number"
	// FieldReceiverBankName holds the string denoting the receiver_bank_name field in the database.
	FieldReceiverBankName = "receiver_bank_name"
	// FieldReceiverName holds the string denoting the receiver_name field in the database.
	FieldReceiverName = "receiver_name"
	// FieldReceiverID holds the string denoting the receiver_id field in the database.
	FieldReceiverID = "receiver_id"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// Table holds the table name of the debt in the database.
	Table = "debts"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "debts"
	// OwnerInverseTable is the table name for the BankAccount entity.
	// It exists in this package in order to avoid circular dependency with the "bankaccount" package.
	OwnerInverseTable = "bank_accounts"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// ReceiverTable is the table that holds the receiver relation/edge.
	ReceiverTable = "debts"
	// ReceiverInverseTable is the table name for the BankAccount entity.
	// It exists in this package in order to avoid circular dependency with the "bankaccount" package.
	ReceiverInverseTable = "bank_accounts"
	// ReceiverColumn is the table column denoting the receiver relation/edge.
	ReceiverColumn = "receiver_id"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "debts"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "transaction_id"
)

// Columns holds all SQL columns for debt fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldOwnerBankAccountNumber,
	FieldOwnerBankName,
	FieldOwnerName,
	FieldOwnerID,
	FieldReceiverBankAccountNumber,
	FieldReceiverBankName,
	FieldReceiverName,
	FieldReceiverID,
	FieldTransactionID,
	FieldStatus,
	FieldDescription,
	FieldAmount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// OwnerBankAccountNumberValidator is a validator for the "owner_bank_account_number" field. It is called by the builders before save.
	OwnerBankAccountNumberValidator func(string) error
	// OwnerBankNameValidator is a validator for the "owner_bank_name" field. It is called by the builders before save.
	OwnerBankNameValidator func(string) error
	// OwnerNameValidator is a validator for the "owner_name" field. It is called by the builders before save.
	OwnerNameValidator func(string) error
	// ReceiverBankAccountNumberValidator is a validator for the "receiver_bank_account_number" field. It is called by the builders before save.
	ReceiverBankAccountNumberValidator func(string) error
	// ReceiverBankNameValidator is a validator for the "receiver_bank_name" field. It is called by the builders before save.
	ReceiverBankNameValidator func(string) error
	// ReceiverNameValidator is a validator for the "receiver_name" field. It is called by the builders before save.
	ReceiverNameValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusCancelled Status = "cancelled"
	StatusFulfilled Status = "fulfilled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusCancelled, StatusFulfilled:
		return nil
	default:
		return fmt.Errorf("debt: invalid enum value for status field: %q", s)
	}
}
