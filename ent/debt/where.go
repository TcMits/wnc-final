// Code generated by ent, DO NOT EDIT.

package debt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// OwnerBankAccountNumber applies equality check predicate on the "owner_bank_account_number" field. It's identical to OwnerBankAccountNumberEQ.
func OwnerBankAccountNumber(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankName applies equality check predicate on the "owner_bank_name" field. It's identical to OwnerBankNameEQ.
func OwnerBankName(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerBankName), v))
	})
}

// OwnerName applies equality check predicate on the "owner_name" field. It's identical to OwnerNameEQ.
func OwnerName(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerName), v))
	})
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// ReceiverBankAccountNumber applies equality check predicate on the "receiver_bank_account_number" field. It's identical to ReceiverBankAccountNumberEQ.
func ReceiverBankAccountNumber(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankName applies equality check predicate on the "receiver_bank_name" field. It's identical to ReceiverBankNameEQ.
func ReceiverBankName(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverName applies equality check predicate on the "receiver_name" field. It's identical to ReceiverNameEQ.
func ReceiverName(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverID applies equality check predicate on the "receiver_id" field. It's identical to ReceiverIDEQ.
func ReceiverID(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverID), v))
	})
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// OwnerBankAccountNumberEQ applies the EQ predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberNEQ applies the NEQ predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberIn applies the In predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerBankAccountNumber), v...))
	})
}

// OwnerBankAccountNumberNotIn applies the NotIn predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerBankAccountNumber), v...))
	})
}

// OwnerBankAccountNumberGT applies the GT predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberGTE applies the GTE predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberLT applies the LT predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberLTE applies the LTE predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberContains applies the Contains predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberHasPrefix applies the HasPrefix predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberHasSuffix applies the HasSuffix predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberEqualFold applies the EqualFold predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankAccountNumberContainsFold applies the ContainsFold predicate on the "owner_bank_account_number" field.
func OwnerBankAccountNumberContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerBankAccountNumber), v))
	})
}

// OwnerBankNameEQ applies the EQ predicate on the "owner_bank_name" field.
func OwnerBankNameEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameNEQ applies the NEQ predicate on the "owner_bank_name" field.
func OwnerBankNameNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameIn applies the In predicate on the "owner_bank_name" field.
func OwnerBankNameIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerBankName), v...))
	})
}

// OwnerBankNameNotIn applies the NotIn predicate on the "owner_bank_name" field.
func OwnerBankNameNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerBankName), v...))
	})
}

// OwnerBankNameGT applies the GT predicate on the "owner_bank_name" field.
func OwnerBankNameGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameGTE applies the GTE predicate on the "owner_bank_name" field.
func OwnerBankNameGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameLT applies the LT predicate on the "owner_bank_name" field.
func OwnerBankNameLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameLTE applies the LTE predicate on the "owner_bank_name" field.
func OwnerBankNameLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameContains applies the Contains predicate on the "owner_bank_name" field.
func OwnerBankNameContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameHasPrefix applies the HasPrefix predicate on the "owner_bank_name" field.
func OwnerBankNameHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameHasSuffix applies the HasSuffix predicate on the "owner_bank_name" field.
func OwnerBankNameHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameEqualFold applies the EqualFold predicate on the "owner_bank_name" field.
func OwnerBankNameEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerBankName), v))
	})
}

// OwnerBankNameContainsFold applies the ContainsFold predicate on the "owner_bank_name" field.
func OwnerBankNameContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerBankName), v))
	})
}

// OwnerNameEQ applies the EQ predicate on the "owner_name" field.
func OwnerNameEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerName), v))
	})
}

// OwnerNameNEQ applies the NEQ predicate on the "owner_name" field.
func OwnerNameNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerName), v))
	})
}

// OwnerNameIn applies the In predicate on the "owner_name" field.
func OwnerNameIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerName), v...))
	})
}

// OwnerNameNotIn applies the NotIn predicate on the "owner_name" field.
func OwnerNameNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerName), v...))
	})
}

// OwnerNameGT applies the GT predicate on the "owner_name" field.
func OwnerNameGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerName), v))
	})
}

// OwnerNameGTE applies the GTE predicate on the "owner_name" field.
func OwnerNameGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerName), v))
	})
}

// OwnerNameLT applies the LT predicate on the "owner_name" field.
func OwnerNameLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerName), v))
	})
}

// OwnerNameLTE applies the LTE predicate on the "owner_name" field.
func OwnerNameLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerName), v))
	})
}

// OwnerNameContains applies the Contains predicate on the "owner_name" field.
func OwnerNameContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerName), v))
	})
}

// OwnerNameHasPrefix applies the HasPrefix predicate on the "owner_name" field.
func OwnerNameHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerName), v))
	})
}

// OwnerNameHasSuffix applies the HasSuffix predicate on the "owner_name" field.
func OwnerNameHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerName), v))
	})
}

// OwnerNameEqualFold applies the EqualFold predicate on the "owner_name" field.
func OwnerNameEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerName), v))
	})
}

// OwnerNameContainsFold applies the ContainsFold predicate on the "owner_name" field.
func OwnerNameContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerName), v))
	})
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// ReceiverBankAccountNumberEQ applies the EQ predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberNEQ applies the NEQ predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberIn applies the In predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiverBankAccountNumber), v...))
	})
}

// ReceiverBankAccountNumberNotIn applies the NotIn predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiverBankAccountNumber), v...))
	})
}

// ReceiverBankAccountNumberGT applies the GT predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberGTE applies the GTE predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberLT applies the LT predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberLTE applies the LTE predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberContains applies the Contains predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberHasPrefix applies the HasPrefix predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberHasSuffix applies the HasSuffix predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberEqualFold applies the EqualFold predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankAccountNumberContainsFold applies the ContainsFold predicate on the "receiver_bank_account_number" field.
func ReceiverBankAccountNumberContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverBankAccountNumber), v))
	})
}

// ReceiverBankNameEQ applies the EQ predicate on the "receiver_bank_name" field.
func ReceiverBankNameEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameNEQ applies the NEQ predicate on the "receiver_bank_name" field.
func ReceiverBankNameNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameIn applies the In predicate on the "receiver_bank_name" field.
func ReceiverBankNameIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiverBankName), v...))
	})
}

// ReceiverBankNameNotIn applies the NotIn predicate on the "receiver_bank_name" field.
func ReceiverBankNameNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiverBankName), v...))
	})
}

// ReceiverBankNameGT applies the GT predicate on the "receiver_bank_name" field.
func ReceiverBankNameGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameGTE applies the GTE predicate on the "receiver_bank_name" field.
func ReceiverBankNameGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameLT applies the LT predicate on the "receiver_bank_name" field.
func ReceiverBankNameLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameLTE applies the LTE predicate on the "receiver_bank_name" field.
func ReceiverBankNameLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameContains applies the Contains predicate on the "receiver_bank_name" field.
func ReceiverBankNameContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameHasPrefix applies the HasPrefix predicate on the "receiver_bank_name" field.
func ReceiverBankNameHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameHasSuffix applies the HasSuffix predicate on the "receiver_bank_name" field.
func ReceiverBankNameHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameEqualFold applies the EqualFold predicate on the "receiver_bank_name" field.
func ReceiverBankNameEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverBankNameContainsFold applies the ContainsFold predicate on the "receiver_bank_name" field.
func ReceiverBankNameContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverBankName), v))
	})
}

// ReceiverNameEQ applies the EQ predicate on the "receiver_name" field.
func ReceiverNameEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameNEQ applies the NEQ predicate on the "receiver_name" field.
func ReceiverNameNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameIn applies the In predicate on the "receiver_name" field.
func ReceiverNameIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiverName), v...))
	})
}

// ReceiverNameNotIn applies the NotIn predicate on the "receiver_name" field.
func ReceiverNameNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiverName), v...))
	})
}

// ReceiverNameGT applies the GT predicate on the "receiver_name" field.
func ReceiverNameGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameGTE applies the GTE predicate on the "receiver_name" field.
func ReceiverNameGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameLT applies the LT predicate on the "receiver_name" field.
func ReceiverNameLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameLTE applies the LTE predicate on the "receiver_name" field.
func ReceiverNameLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameContains applies the Contains predicate on the "receiver_name" field.
func ReceiverNameContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameHasPrefix applies the HasPrefix predicate on the "receiver_name" field.
func ReceiverNameHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameHasSuffix applies the HasSuffix predicate on the "receiver_name" field.
func ReceiverNameHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameEqualFold applies the EqualFold predicate on the "receiver_name" field.
func ReceiverNameEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverName), v))
	})
}

// ReceiverNameContainsFold applies the ContainsFold predicate on the "receiver_name" field.
func ReceiverNameContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverName), v))
	})
}

// ReceiverIDEQ applies the EQ predicate on the "receiver_id" field.
func ReceiverIDEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverID), v))
	})
}

// ReceiverIDNEQ applies the NEQ predicate on the "receiver_id" field.
func ReceiverIDNEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverID), v))
	})
}

// ReceiverIDIn applies the In predicate on the "receiver_id" field.
func ReceiverIDIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReceiverID), v...))
	})
}

// ReceiverIDNotIn applies the NotIn predicate on the "receiver_id" field.
func ReceiverIDNotIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReceiverID), v...))
	})
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v uuid.UUID) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionID), v))
	})
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...uuid.UUID) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionID), v...))
	})
}

// TransactionIDIsNil applies the IsNil predicate on the "transaction_id" field.
func TransactionIDIsNil() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionID)))
	})
}

// TransactionIDNotNil applies the NotNil predicate on the "transaction_id" field.
func TransactionIDNotNil() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionID)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Debt {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.BankAccount) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiver applies the HasEdge predicate on the "receiver" edge.
func HasReceiver() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceiverTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiverWith applies the HasEdge predicate on the "receiver" edge with a given conditions (other predicates).
func HasReceiverWith(preds ...predicate.BankAccount) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReceiverInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.Transaction) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Debt) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Debt) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Debt) predicate.Debt {
	return predicate.Debt(func(s *sql.Selector) {
		p(s.Not())
	})
}
