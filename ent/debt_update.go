// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/debt"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/TcMits/wnc-final/ent/transaction"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// DebtUpdate is the builder for updating Debt entities.
type DebtUpdate struct {
	config
	hooks    []Hook
	mutation *DebtMutation
}

// Where appends a list predicates to the DebtUpdate builder.
func (du *DebtUpdate) Where(ps ...predicate.Debt) *DebtUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DebtUpdate) SetUpdateTime(t time.Time) *DebtUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetOwnerBankAccountNumber sets the "owner_bank_account_number" field.
func (du *DebtUpdate) SetOwnerBankAccountNumber(s string) *DebtUpdate {
	du.mutation.SetOwnerBankAccountNumber(s)
	return du
}

// SetOwnerBankName sets the "owner_bank_name" field.
func (du *DebtUpdate) SetOwnerBankName(s string) *DebtUpdate {
	du.mutation.SetOwnerBankName(s)
	return du
}

// SetOwnerName sets the "owner_name" field.
func (du *DebtUpdate) SetOwnerName(s string) *DebtUpdate {
	du.mutation.SetOwnerName(s)
	return du
}

// SetOwnerID sets the "owner_id" field.
func (du *DebtUpdate) SetOwnerID(u uuid.UUID) *DebtUpdate {
	du.mutation.SetOwnerID(u)
	return du
}

// SetReceiverBankAccountNumber sets the "receiver_bank_account_number" field.
func (du *DebtUpdate) SetReceiverBankAccountNumber(s string) *DebtUpdate {
	du.mutation.SetReceiverBankAccountNumber(s)
	return du
}

// SetReceiverBankName sets the "receiver_bank_name" field.
func (du *DebtUpdate) SetReceiverBankName(s string) *DebtUpdate {
	du.mutation.SetReceiverBankName(s)
	return du
}

// SetReceiverName sets the "receiver_name" field.
func (du *DebtUpdate) SetReceiverName(s string) *DebtUpdate {
	du.mutation.SetReceiverName(s)
	return du
}

// SetReceiverID sets the "receiver_id" field.
func (du *DebtUpdate) SetReceiverID(u uuid.UUID) *DebtUpdate {
	du.mutation.SetReceiverID(u)
	return du
}

// SetTransactionID sets the "transaction_id" field.
func (du *DebtUpdate) SetTransactionID(u uuid.UUID) *DebtUpdate {
	du.mutation.SetTransactionID(u)
	return du
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (du *DebtUpdate) SetNillableTransactionID(u *uuid.UUID) *DebtUpdate {
	if u != nil {
		du.SetTransactionID(*u)
	}
	return du
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (du *DebtUpdate) ClearTransactionID() *DebtUpdate {
	du.mutation.ClearTransactionID()
	return du
}

// SetStatus sets the "status" field.
func (du *DebtUpdate) SetStatus(d debt.Status) *DebtUpdate {
	du.mutation.SetStatus(d)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DebtUpdate) SetNillableStatus(d *debt.Status) *DebtUpdate {
	if d != nil {
		du.SetStatus(*d)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DebtUpdate) SetDescription(s string) *DebtUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DebtUpdate) SetNillableDescription(s *string) *DebtUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DebtUpdate) ClearDescription() *DebtUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetAmount sets the "amount" field.
func (du *DebtUpdate) SetAmount(d decimal.Decimal) *DebtUpdate {
	du.mutation.ResetAmount()
	du.mutation.SetAmount(d)
	return du
}

// AddAmount adds d to the "amount" field.
func (du *DebtUpdate) AddAmount(d decimal.Decimal) *DebtUpdate {
	du.mutation.AddAmount(d)
	return du
}

// SetOwner sets the "owner" edge to the BankAccount entity.
func (du *DebtUpdate) SetOwner(b *BankAccount) *DebtUpdate {
	return du.SetOwnerID(b.ID)
}

// SetReceiver sets the "receiver" edge to the BankAccount entity.
func (du *DebtUpdate) SetReceiver(b *BankAccount) *DebtUpdate {
	return du.SetReceiverID(b.ID)
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (du *DebtUpdate) SetTransaction(t *Transaction) *DebtUpdate {
	return du.SetTransactionID(t.ID)
}

// Mutation returns the DebtMutation object of the builder.
func (du *DebtUpdate) Mutation() *DebtMutation {
	return du.mutation
}

// ClearOwner clears the "owner" edge to the BankAccount entity.
func (du *DebtUpdate) ClearOwner() *DebtUpdate {
	du.mutation.ClearOwner()
	return du
}

// ClearReceiver clears the "receiver" edge to the BankAccount entity.
func (du *DebtUpdate) ClearReceiver() *DebtUpdate {
	du.mutation.ClearReceiver()
	return du
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (du *DebtUpdate) ClearTransaction() *DebtUpdate {
	du.mutation.ClearTransaction()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DebtUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DebtMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DebtUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DebtUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DebtUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DebtUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := debt.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DebtUpdate) check() error {
	if v, ok := du.mutation.OwnerBankAccountNumber(); ok {
		if err := debt.OwnerBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "owner_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_bank_account_number": %w`, err)}
		}
	}
	if v, ok := du.mutation.OwnerBankName(); ok {
		if err := debt.OwnerBankNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_bank_name", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_bank_name": %w`, err)}
		}
	}
	if v, ok := du.mutation.OwnerName(); ok {
		if err := debt.OwnerNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_name", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_name": %w`, err)}
		}
	}
	if v, ok := du.mutation.ReceiverBankAccountNumber(); ok {
		if err := debt.ReceiverBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_bank_account_number": %w`, err)}
		}
	}
	if v, ok := du.mutation.ReceiverBankName(); ok {
		if err := debt.ReceiverBankNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_name", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_bank_name": %w`, err)}
		}
	}
	if v, ok := du.mutation.ReceiverName(); ok {
		if err := debt.ReceiverNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_name", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Status(); ok {
		if err := debt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Debt.status": %w`, err)}
		}
	}
	if _, ok := du.mutation.OwnerID(); du.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Debt.owner"`)
	}
	if _, ok := du.mutation.ReceiverID(); du.mutation.ReceiverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Debt.receiver"`)
	}
	return nil
}

func (du *DebtUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   debt.Table,
			Columns: debt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: debt.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(debt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.OwnerBankAccountNumber(); ok {
		_spec.SetField(debt.FieldOwnerBankAccountNumber, field.TypeString, value)
	}
	if value, ok := du.mutation.OwnerBankName(); ok {
		_spec.SetField(debt.FieldOwnerBankName, field.TypeString, value)
	}
	if value, ok := du.mutation.OwnerName(); ok {
		_spec.SetField(debt.FieldOwnerName, field.TypeString, value)
	}
	if value, ok := du.mutation.ReceiverBankAccountNumber(); ok {
		_spec.SetField(debt.FieldReceiverBankAccountNumber, field.TypeString, value)
	}
	if value, ok := du.mutation.ReceiverBankName(); ok {
		_spec.SetField(debt.FieldReceiverBankName, field.TypeString, value)
	}
	if value, ok := du.mutation.ReceiverName(); ok {
		_spec.SetField(debt.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(debt.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(debt.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(debt.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.SetField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedAmount(); ok {
		_spec.AddField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if du.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.OwnerTable,
			Columns: []string{debt.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.OwnerTable,
			Columns: []string{debt.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.ReceiverTable,
			Columns: []string{debt.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.ReceiverTable,
			Columns: []string{debt.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   debt.TransactionTable,
			Columns: []string{debt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   debt.TransactionTable,
			Columns: []string{debt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DebtUpdateOne is the builder for updating a single Debt entity.
type DebtUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DebtMutation
}

// SetUpdateTime sets the "update_time" field.
func (duo *DebtUpdateOne) SetUpdateTime(t time.Time) *DebtUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetOwnerBankAccountNumber sets the "owner_bank_account_number" field.
func (duo *DebtUpdateOne) SetOwnerBankAccountNumber(s string) *DebtUpdateOne {
	duo.mutation.SetOwnerBankAccountNumber(s)
	return duo
}

// SetOwnerBankName sets the "owner_bank_name" field.
func (duo *DebtUpdateOne) SetOwnerBankName(s string) *DebtUpdateOne {
	duo.mutation.SetOwnerBankName(s)
	return duo
}

// SetOwnerName sets the "owner_name" field.
func (duo *DebtUpdateOne) SetOwnerName(s string) *DebtUpdateOne {
	duo.mutation.SetOwnerName(s)
	return duo
}

// SetOwnerID sets the "owner_id" field.
func (duo *DebtUpdateOne) SetOwnerID(u uuid.UUID) *DebtUpdateOne {
	duo.mutation.SetOwnerID(u)
	return duo
}

// SetReceiverBankAccountNumber sets the "receiver_bank_account_number" field.
func (duo *DebtUpdateOne) SetReceiverBankAccountNumber(s string) *DebtUpdateOne {
	duo.mutation.SetReceiverBankAccountNumber(s)
	return duo
}

// SetReceiverBankName sets the "receiver_bank_name" field.
func (duo *DebtUpdateOne) SetReceiverBankName(s string) *DebtUpdateOne {
	duo.mutation.SetReceiverBankName(s)
	return duo
}

// SetReceiverName sets the "receiver_name" field.
func (duo *DebtUpdateOne) SetReceiverName(s string) *DebtUpdateOne {
	duo.mutation.SetReceiverName(s)
	return duo
}

// SetReceiverID sets the "receiver_id" field.
func (duo *DebtUpdateOne) SetReceiverID(u uuid.UUID) *DebtUpdateOne {
	duo.mutation.SetReceiverID(u)
	return duo
}

// SetTransactionID sets the "transaction_id" field.
func (duo *DebtUpdateOne) SetTransactionID(u uuid.UUID) *DebtUpdateOne {
	duo.mutation.SetTransactionID(u)
	return duo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableTransactionID(u *uuid.UUID) *DebtUpdateOne {
	if u != nil {
		duo.SetTransactionID(*u)
	}
	return duo
}

// ClearTransactionID clears the value of the "transaction_id" field.
func (duo *DebtUpdateOne) ClearTransactionID() *DebtUpdateOne {
	duo.mutation.ClearTransactionID()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DebtUpdateOne) SetStatus(d debt.Status) *DebtUpdateOne {
	duo.mutation.SetStatus(d)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableStatus(d *debt.Status) *DebtUpdateOne {
	if d != nil {
		duo.SetStatus(*d)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DebtUpdateOne) SetDescription(s string) *DebtUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableDescription(s *string) *DebtUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DebtUpdateOne) ClearDescription() *DebtUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetAmount sets the "amount" field.
func (duo *DebtUpdateOne) SetAmount(d decimal.Decimal) *DebtUpdateOne {
	duo.mutation.ResetAmount()
	duo.mutation.SetAmount(d)
	return duo
}

// AddAmount adds d to the "amount" field.
func (duo *DebtUpdateOne) AddAmount(d decimal.Decimal) *DebtUpdateOne {
	duo.mutation.AddAmount(d)
	return duo
}

// SetOwner sets the "owner" edge to the BankAccount entity.
func (duo *DebtUpdateOne) SetOwner(b *BankAccount) *DebtUpdateOne {
	return duo.SetOwnerID(b.ID)
}

// SetReceiver sets the "receiver" edge to the BankAccount entity.
func (duo *DebtUpdateOne) SetReceiver(b *BankAccount) *DebtUpdateOne {
	return duo.SetReceiverID(b.ID)
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (duo *DebtUpdateOne) SetTransaction(t *Transaction) *DebtUpdateOne {
	return duo.SetTransactionID(t.ID)
}

// Mutation returns the DebtMutation object of the builder.
func (duo *DebtUpdateOne) Mutation() *DebtMutation {
	return duo.mutation
}

// ClearOwner clears the "owner" edge to the BankAccount entity.
func (duo *DebtUpdateOne) ClearOwner() *DebtUpdateOne {
	duo.mutation.ClearOwner()
	return duo
}

// ClearReceiver clears the "receiver" edge to the BankAccount entity.
func (duo *DebtUpdateOne) ClearReceiver() *DebtUpdateOne {
	duo.mutation.ClearReceiver()
	return duo
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (duo *DebtUpdateOne) ClearTransaction() *DebtUpdateOne {
	duo.mutation.ClearTransaction()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DebtUpdateOne) Select(field string, fields ...string) *DebtUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Debt entity.
func (duo *DebtUpdateOne) Save(ctx context.Context) (*Debt, error) {
	var (
		err  error
		node *Debt
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DebtMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Debt)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DebtMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DebtUpdateOne) SaveX(ctx context.Context) *Debt {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DebtUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DebtUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DebtUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := debt.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DebtUpdateOne) check() error {
	if v, ok := duo.mutation.OwnerBankAccountNumber(); ok {
		if err := debt.OwnerBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "owner_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_bank_account_number": %w`, err)}
		}
	}
	if v, ok := duo.mutation.OwnerBankName(); ok {
		if err := debt.OwnerBankNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_bank_name", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_bank_name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.OwnerName(); ok {
		if err := debt.OwnerNameValidator(v); err != nil {
			return &ValidationError{Name: "owner_name", err: fmt.Errorf(`ent: validator failed for field "Debt.owner_name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ReceiverBankAccountNumber(); ok {
		if err := debt.ReceiverBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_bank_account_number": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ReceiverBankName(); ok {
		if err := debt.ReceiverBankNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_name", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_bank_name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ReceiverName(); ok {
		if err := debt.ReceiverNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_name", err: fmt.Errorf(`ent: validator failed for field "Debt.receiver_name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Status(); ok {
		if err := debt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Debt.status": %w`, err)}
		}
	}
	if _, ok := duo.mutation.OwnerID(); duo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Debt.owner"`)
	}
	if _, ok := duo.mutation.ReceiverID(); duo.mutation.ReceiverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Debt.receiver"`)
	}
	return nil
}

func (duo *DebtUpdateOne) sqlSave(ctx context.Context) (_node *Debt, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   debt.Table,
			Columns: debt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: debt.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Debt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debt.FieldID)
		for _, f := range fields {
			if !debt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != debt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(debt.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.OwnerBankAccountNumber(); ok {
		_spec.SetField(debt.FieldOwnerBankAccountNumber, field.TypeString, value)
	}
	if value, ok := duo.mutation.OwnerBankName(); ok {
		_spec.SetField(debt.FieldOwnerBankName, field.TypeString, value)
	}
	if value, ok := duo.mutation.OwnerName(); ok {
		_spec.SetField(debt.FieldOwnerName, field.TypeString, value)
	}
	if value, ok := duo.mutation.ReceiverBankAccountNumber(); ok {
		_spec.SetField(debt.FieldReceiverBankAccountNumber, field.TypeString, value)
	}
	if value, ok := duo.mutation.ReceiverBankName(); ok {
		_spec.SetField(debt.FieldReceiverBankName, field.TypeString, value)
	}
	if value, ok := duo.mutation.ReceiverName(); ok {
		_spec.SetField(debt.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(debt.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(debt.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(debt.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.SetField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedAmount(); ok {
		_spec.AddField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if duo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.OwnerTable,
			Columns: []string{debt.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.OwnerTable,
			Columns: []string{debt.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.ReceiverTable,
			Columns: []string{debt.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.ReceiverTable,
			Columns: []string{debt.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   debt.TransactionTable,
			Columns: []string{debt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   debt.TransactionTable,
			Columns: []string{debt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Debt{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
