// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/TcMits/wnc-final/ent/employee"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/google/uuid"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// JwtTokenKey holds the value of the "jwt_token_key" field.
	JwtTokenKey string `json:"-"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Required. 128 characters or fewer. Letters, digits only.
	Username string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldIsActive:
			values[i] = new(sql.NullBool)
		case employee.FieldJwtTokenKey, employee.FieldPassword, employee.FieldUsername, employee.FieldFirstName, employee.FieldLastName:
			values[i] = new(sql.NullString)
		case employee.FieldCreateTime, employee.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case employee.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Employee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case employee.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case employee.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = value.Time
			}
		case employee.FieldJwtTokenKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jwt_token_key", values[i])
			} else if value.Valid {
				e.JwtTokenKey = value.String
			}
		case employee.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				e.Password = value.String
			}
		case employee.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				e.Username = value.String
			}
		case employee.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				e.FirstName = value.String
			}
		case employee.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				e.LastName = value.String
			}
		case employee.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				e.IsActive = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return (&EmployeeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("jwt_token_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(e.Username)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(e.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(e.LastName)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", e.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

type EmployeeCreateRepository struct {
	client   *Client
	isAtomic bool
}

func NewEmployeeCreateRepository(
	client *Client,
	isAtomic bool,
) *EmployeeCreateRepository {
	return &EmployeeCreateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *EmployeeCreateRepository) CreateWithClient(
	ctx context.Context, client *Client, input *EmployeeCreateInput,
) (*Employee, error) {
	instance, err := client.Employee.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

func (r *EmployeeCreateRepository) Create(
	ctx context.Context, input *EmployeeCreateInput,
) (*Employee, error) {
	if !r.isAtomic {
		return r.CreateWithClient(ctx, r.client, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err := r.CreateWithClient(ctx, tx.Client(), input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

type EmployeeDeleteRepository struct {
	client   *Client
	isAtomic bool
}

func NewEmployeeDeleteRepository(
	client *Client,
	isAtomic bool,
) *EmployeeDeleteRepository {
	return &EmployeeDeleteRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *EmployeeDeleteRepository) DeleteWithClient(
	ctx context.Context, client *Client, instance *Employee,
) error {
	err := client.Employee.DeleteOne(instance).Exec(ctx)
	if err != nil {
		return err
	}
	return nil
}

func (r *EmployeeDeleteRepository) Delete(
	ctx context.Context, instance *Employee,
) error {
	if !r.isAtomic {
		return r.DeleteWithClient(ctx, r.client, instance)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return err
	}
	err = r.DeleteWithClient(ctx, tx.Client(), instance)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return err
	}
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("committing transaction: %w", err)
	}
	return nil
}

// EmployeeCreateInput represents a mutation input for creating employees.
type EmployeeCreateInput struct {
	CreateTime  *time.Time `json:"create_time,omitempty" form:"create_time"`
	UpdateTime  *time.Time `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey *string    `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	Password    *string    `json:"password,omitempty" form:"password"`
	Username    string     `json:"username,omitempty" form:"username"`
	FirstName   *string    `json:"first_name,omitempty" form:"first_name"`
	LastName    *string    `json:"last_name,omitempty" form:"last_name"`
	IsActive    *bool      `json:"is_active,omitempty" form:"is_active"`
}

// Mutate applies the EmployeeCreateInput on the EmployeeCreate builder.
func (i *EmployeeCreateInput) Mutate(m *EmployeeMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	m.SetUsername(i.Username)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
}

// SetInput applies the change-set in the EmployeeCreateInput on the create builder.
func (c *EmployeeCreate) SetInput(i *EmployeeCreateInput) *EmployeeCreate {
	i.Mutate(c.Mutation())
	return c
}

// EmployeeUpdateInput represents a mutation input for updating employees.
type EmployeeUpdateInput struct {
	ID               uuid.UUID
	UpdateTime       *time.Time `json:"update_time,omitempty" form:"update_time"`
	JwtTokenKey      *string    `json:"jwt_token_key,omitempty" form:"jwt_token_key"`
	ClearJwtTokenKey bool
	Password         *string `json:"password,omitempty" form:"password"`
	ClearPassword    bool
	Username         *string `json:"username,omitempty" form:"username"`
	FirstName        *string `json:"first_name,omitempty" form:"first_name"`
	ClearFirstName   bool
	LastName         *string `json:"last_name,omitempty" form:"last_name"`
	ClearLastName    bool
	IsActive         *bool `json:"is_active,omitempty" form:"is_active"`
	ClearIsActive    bool
}

// Mutate applies the EmployeeUpdateInput on the EmployeeMutation.
func (i *EmployeeUpdateInput) Mutate(m *EmployeeMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearJwtTokenKey {
		m.ClearJwtTokenKey()
	}
	if v := i.JwtTokenKey; v != nil {
		m.SetJwtTokenKey(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearIsActive {
		m.ClearIsActive()
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
}

// SetInput applies the change-set in the EmployeeUpdateInput on the update builder.
func (u *EmployeeUpdate) SetInput(i *EmployeeUpdateInput) *EmployeeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the EmployeeUpdateInput on the update-one builder.
func (u *EmployeeUpdateOne) SetInput(i *EmployeeUpdateInput) *EmployeeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

type EmployeeReadRepository struct {
	client *Client
}

func NewEmployeeReadRepository(
	client *Client,
) *EmployeeReadRepository {
	return &EmployeeReadRepository{
		client: client,
	}
}

func (r *EmployeeReadRepository) prepareQuery(
	client *Client, limit *int, offset *int, o *EmployeeOrderInput, w *EmployeeWhereInput,
) (*EmployeeQuery, error) {
	var err error
	q := r.client.Employee.Query()
	if limit != nil {
		q = q.Limit(*limit)
	}
	if offset != nil {
		q = q.Offset(*offset)
	}
	if o != nil {
		q = o.Order(q)
	}
	if w != nil {
		q, err = w.Filter(q)
		if err != nil {
			return nil, err
		}
	}
	return q, nil
}

// using in Tx
func (r *EmployeeReadRepository) GetWithClient(
	ctx context.Context, client *Client, w *EmployeeWhereInput, forUpdate bool,
) (*Employee, error) {
	q, err := r.prepareQuery(client, nil, nil, nil, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instance, err := q.Only(ctx)
	if err != nil {
		return nil, err
	}
	return instance, nil
}

// using in Tx
func (r *EmployeeReadRepository) ListWithClient(
	ctx context.Context, client *Client, limit *int, offset *int, o *EmployeeOrderInput, w *EmployeeWhereInput, forUpdate bool,
) ([]*Employee, error) {
	q, err := r.prepareQuery(client, limit, offset, o, w)
	if err != nil {
		return nil, err
	}
	if forUpdate {
		q = q.ForUpdate()
	}
	instances, err := q.All(ctx)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (r *EmployeeReadRepository) Count(ctx context.Context, w *EmployeeWhereInput) (int, error) {
	q, err := r.prepareQuery(r.client, nil, nil, nil, w)
	if err != nil {
		return 0, err
	}
	count, err := q.Count(ctx)
	if err != nil {
		return 0, err
	}
	return count, nil
}

func (r *EmployeeReadRepository) Get(ctx context.Context, w *EmployeeWhereInput) (*Employee, error) {
	return r.GetWithClient(ctx, r.client, w, false)
}

func (r *EmployeeReadRepository) List(
	ctx context.Context, limit *int, offset *int, o *EmployeeOrderInput, w *EmployeeWhereInput,
) ([]*Employee, error) {
	return r.ListWithClient(ctx, r.client, limit, offset, o, w, false)
}

type EmployeeSerializer struct {
	columns map[string]func(context.Context, *Employee) any
}

func NewEmployeeSerializer(customColumns map[string]func(context.Context, *Employee) any, columns ...string) *EmployeeSerializer {
	columnsMap := map[string]func(context.Context, *Employee) any{}
	for _, col := range columns {
		switch col {

		case employee.FieldID:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.ID
			}

		case employee.FieldCreateTime:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.CreateTime
			}

		case employee.FieldUpdateTime:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.UpdateTime
			}

		case employee.FieldJwtTokenKey:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.JwtTokenKey
			}

		case employee.FieldPassword:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.Password
			}

		case employee.FieldUsername:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.Username
			}

		case employee.FieldFirstName:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.FirstName
			}

		case employee.FieldLastName:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.LastName
			}

		case employee.FieldIsActive:
			columnsMap[col] = func(ctx context.Context, e *Employee) any {
				return e.IsActive
			}

		default:
			panic(fmt.Sprintf("Unexpect column %s", col))
		}
	}

	for k, serializeFunc := range customColumns {
		columnsMap[k] = serializeFunc
	}

	return &EmployeeSerializer{
		columns: columnsMap,
	}
}

func (s *EmployeeSerializer) Serialize(ctx context.Context, e *Employee) map[string]any {
	result := make(map[string]any, len(s.columns))
	for col, serializeFunc := range s.columns {
		result[col] = serializeFunc(ctx, e)
	}
	return result
}

type EmployeeUpdateRepository struct {
	client   *Client
	isAtomic bool
}

func NewEmployeeUpdateRepository(
	client *Client,
	isAtomic bool,
) *EmployeeUpdateRepository {
	return &EmployeeUpdateRepository{
		client:   client,
		isAtomic: isAtomic,
	}
}

// using in Tx
func (r *EmployeeUpdateRepository) UpdateWithClient(
	ctx context.Context, client *Client, instance *Employee, input *EmployeeUpdateInput,
) (*Employee, error) {
	newInstance, err := client.Employee.UpdateOne(instance).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return newInstance, nil
}

func (r *EmployeeUpdateRepository) Update(
	ctx context.Context, instance *Employee, input *EmployeeUpdateInput,
) (*Employee, error) {
	if !r.isAtomic {
		return r.UpdateWithClient(ctx, r.client, instance, input)
	}
	tx, err := r.client.Tx(ctx)
	if err != nil {
		return nil, err
	}
	instance, err = r.UpdateWithClient(ctx, tx.Client(), instance, input)
	if err != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("rolling back transaction: %w", rerr)
		}
		return nil, err
	}
	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("committing transaction: %w", err)
	}
	return instance, nil
}

// EmployeeWhereInput represents a where input for filtering Employee queries.
type EmployeeWhereInput struct {
	Predicates []predicate.Employee  `json:"-"`
	Not        *EmployeeWhereInput   `json:"not,omitempty"`
	Or         []*EmployeeWhereInput `json:"or,omitempty"`
	And        []*EmployeeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty" form:"id" param:"id" url:"id"`
	IDNEQ   *uuid.UUID  `json:"id_neq,omitempty" form:"id_neq" param:"id_neq" url:"id_neq"`
	IDIn    []uuid.UUID `json:"id_in,omitempty" form:"id_in" param:"id_in" url:"id_in"`
	IDNotIn []uuid.UUID `json:"id_not_in,omitempty" form:"id_not_in" param:"id_not_in" url:"id_not_in"`
	IDGT    *uuid.UUID  `json:"id_gt,omitempty" form:"id_gt" param:"id_gt" url:"id_gt"`
	IDGTE   *uuid.UUID  `json:"id_gte,omitempty" form:"id_gte" param:"id_gte" url:"id_gte"`
	IDLT    *uuid.UUID  `json:"id_lt,omitempty" form:"id_lt" param:"id_lt" url:"id_lt"`
	IDLTE   *uuid.UUID  `json:"id_lte,omitempty" form:"id_lte" param:"id_lte" url:"id_lte"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"create_time,omitempty" form:"create_time" param:"create_time" url:"create_time"`
	CreateTimeNEQ   *time.Time  `json:"create_time_neq,omitempty" form:"create_time_neq" param:"create_time_neq" url:"create_time_neq"`
	CreateTimeIn    []time.Time `json:"create_time_in,omitempty" form:"create_time_in" param:"create_time_in" url:"create_time_in"`
	CreateTimeNotIn []time.Time `json:"create_time_not_in,omitempty" form:"create_time_not_in" param:"create_time_not_in" url:"create_time_not_in"`
	CreateTimeGT    *time.Time  `json:"create_time_gt,omitempty" form:"create_time_gt" param:"create_time_gt" url:"create_time_gt"`
	CreateTimeGTE   *time.Time  `json:"create_time_gte,omitempty" form:"create_time_gte" param:"create_time_gte" url:"create_time_gte"`
	CreateTimeLT    *time.Time  `json:"create_time_lt,omitempty" form:"create_time_lt" param:"create_time_lt" url:"create_time_lt"`
	CreateTimeLTE   *time.Time  `json:"create_time_lte,omitempty" form:"create_time_lte" param:"create_time_lte" url:"create_time_lte"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"update_time,omitempty" form:"update_time" param:"update_time" url:"update_time"`
	UpdateTimeNEQ   *time.Time  `json:"update_time_neq,omitempty" form:"update_time_neq" param:"update_time_neq" url:"update_time_neq"`
	UpdateTimeIn    []time.Time `json:"update_time_in,omitempty" form:"update_time_in" param:"update_time_in" url:"update_time_in"`
	UpdateTimeNotIn []time.Time `json:"update_time_not_in,omitempty" form:"update_time_not_in" param:"update_time_not_in" url:"update_time_not_in"`
	UpdateTimeGT    *time.Time  `json:"update_time_gt,omitempty" form:"update_time_gt" param:"update_time_gt" url:"update_time_gt"`
	UpdateTimeGTE   *time.Time  `json:"update_time_gte,omitempty" form:"update_time_gte" param:"update_time_gte" url:"update_time_gte"`
	UpdateTimeLT    *time.Time  `json:"update_time_lt,omitempty" form:"update_time_lt" param:"update_time_lt" url:"update_time_lt"`
	UpdateTimeLTE   *time.Time  `json:"update_time_lte,omitempty" form:"update_time_lte" param:"update_time_lte" url:"update_time_lte"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty" form:"username" param:"username" url:"username"`
	UsernameNEQ          *string  `json:"username_neq,omitempty" form:"username_neq" param:"username_neq" url:"username_neq"`
	UsernameIn           []string `json:"username_in,omitempty" form:"username_in" param:"username_in" url:"username_in"`
	UsernameNotIn        []string `json:"username_not_in,omitempty" form:"username_not_in" param:"username_not_in" url:"username_not_in"`
	UsernameGT           *string  `json:"username_gt,omitempty" form:"username_gt" param:"username_gt" url:"username_gt"`
	UsernameGTE          *string  `json:"username_gte,omitempty" form:"username_gte" param:"username_gte" url:"username_gte"`
	UsernameLT           *string  `json:"username_lt,omitempty" form:"username_lt" param:"username_lt" url:"username_lt"`
	UsernameLTE          *string  `json:"username_lte,omitempty" form:"username_lte" param:"username_lte" url:"username_lte"`
	UsernameContains     *string  `json:"username_contains,omitempty" form:"username_contains" param:"username_contains" url:"username_contains"`
	UsernameHasPrefix    *string  `json:"username_has_prefix,omitempty" form:"username_has_prefix" param:"username_has_prefix" url:"username_has_prefix"`
	UsernameHasSuffix    *string  `json:"username_has_suffix,omitempty" form:"username_has_suffix" param:"username_has_suffix" url:"username_has_suffix"`
	UsernameEqualFold    *string  `json:"username_equal_fold,omitempty" form:"username_equal_fold" param:"username_equal_fold" url:"username_equal_fold"`
	UsernameContainsFold *string  `json:"username_contains_fold,omitempty" form:"username_contains_fold" param:"username_contains_fold" url:"username_contains_fold"`

	// "first_name" field predicates.
	FirstName             *string  `json:"first_name,omitempty" form:"first_name" param:"first_name" url:"first_name"`
	FirstNameNEQ          *string  `json:"first_name_neq,omitempty" form:"first_name_neq" param:"first_name_neq" url:"first_name_neq"`
	FirstNameIn           []string `json:"first_name_in,omitempty" form:"first_name_in" param:"first_name_in" url:"first_name_in"`
	FirstNameNotIn        []string `json:"first_name_not_in,omitempty" form:"first_name_not_in" param:"first_name_not_in" url:"first_name_not_in"`
	FirstNameGT           *string  `json:"first_name_gt,omitempty" form:"first_name_gt" param:"first_name_gt" url:"first_name_gt"`
	FirstNameGTE          *string  `json:"first_name_gte,omitempty" form:"first_name_gte" param:"first_name_gte" url:"first_name_gte"`
	FirstNameLT           *string  `json:"first_name_lt,omitempty" form:"first_name_lt" param:"first_name_lt" url:"first_name_lt"`
	FirstNameLTE          *string  `json:"first_name_lte,omitempty" form:"first_name_lte" param:"first_name_lte" url:"first_name_lte"`
	FirstNameContains     *string  `json:"first_name_contains,omitempty" form:"first_name_contains" param:"first_name_contains" url:"first_name_contains"`
	FirstNameHasPrefix    *string  `json:"first_name_has_prefix,omitempty" form:"first_name_has_prefix" param:"first_name_has_prefix" url:"first_name_has_prefix"`
	FirstNameHasSuffix    *string  `json:"first_name_has_suffix,omitempty" form:"first_name_has_suffix" param:"first_name_has_suffix" url:"first_name_has_suffix"`
	FirstNameIsNil        bool     `json:"first_name_is_nil,omitempty" form:"first_name_is_nil" param:"first_name_is_nil" url:"first_name_is_nil"`
	FirstNameNotNil       bool     `json:"first_name_not_nil,omitempty" form:"first_name_not_nil" param:"first_name_not_nil" url:"first_name_not_nil"`
	FirstNameEqualFold    *string  `json:"first_name_equal_fold,omitempty" form:"first_name_equal_fold" param:"first_name_equal_fold" url:"first_name_equal_fold"`
	FirstNameContainsFold *string  `json:"first_name_contains_fold,omitempty" form:"first_name_contains_fold" param:"first_name_contains_fold" url:"first_name_contains_fold"`

	// "last_name" field predicates.
	LastName             *string  `json:"last_name,omitempty" form:"last_name" param:"last_name" url:"last_name"`
	LastNameNEQ          *string  `json:"last_name_neq,omitempty" form:"last_name_neq" param:"last_name_neq" url:"last_name_neq"`
	LastNameIn           []string `json:"last_name_in,omitempty" form:"last_name_in" param:"last_name_in" url:"last_name_in"`
	LastNameNotIn        []string `json:"last_name_not_in,omitempty" form:"last_name_not_in" param:"last_name_not_in" url:"last_name_not_in"`
	LastNameGT           *string  `json:"last_name_gt,omitempty" form:"last_name_gt" param:"last_name_gt" url:"last_name_gt"`
	LastNameGTE          *string  `json:"last_name_gte,omitempty" form:"last_name_gte" param:"last_name_gte" url:"last_name_gte"`
	LastNameLT           *string  `json:"last_name_lt,omitempty" form:"last_name_lt" param:"last_name_lt" url:"last_name_lt"`
	LastNameLTE          *string  `json:"last_name_lte,omitempty" form:"last_name_lte" param:"last_name_lte" url:"last_name_lte"`
	LastNameContains     *string  `json:"last_name_contains,omitempty" form:"last_name_contains" param:"last_name_contains" url:"last_name_contains"`
	LastNameHasPrefix    *string  `json:"last_name_has_prefix,omitempty" form:"last_name_has_prefix" param:"last_name_has_prefix" url:"last_name_has_prefix"`
	LastNameHasSuffix    *string  `json:"last_name_has_suffix,omitempty" form:"last_name_has_suffix" param:"last_name_has_suffix" url:"last_name_has_suffix"`
	LastNameIsNil        bool     `json:"last_name_is_nil,omitempty" form:"last_name_is_nil" param:"last_name_is_nil" url:"last_name_is_nil"`
	LastNameNotNil       bool     `json:"last_name_not_nil,omitempty" form:"last_name_not_nil" param:"last_name_not_nil" url:"last_name_not_nil"`
	LastNameEqualFold    *string  `json:"last_name_equal_fold,omitempty" form:"last_name_equal_fold" param:"last_name_equal_fold" url:"last_name_equal_fold"`
	LastNameContainsFold *string  `json:"last_name_contains_fold,omitempty" form:"last_name_contains_fold" param:"last_name_contains_fold" url:"last_name_contains_fold"`

	// "is_active" field predicates.
	IsActive       *bool `json:"is_active,omitempty" form:"is_active" param:"is_active" url:"is_active"`
	IsActiveNEQ    *bool `json:"is_active_neq,omitempty" form:"is_active_neq" param:"is_active_neq" url:"is_active_neq"`
	IsActiveIsNil  bool  `json:"is_active_is_nil,omitempty" form:"is_active_is_nil" param:"is_active_is_nil" url:"is_active_is_nil"`
	IsActiveNotNil bool  `json:"is_active_not_nil,omitempty" form:"is_active_not_nil" param:"is_active_not_nil" url:"is_active_not_nil"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EmployeeWhereInput) AddPredicates(predicates ...predicate.Employee) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EmployeeWhereInput filter on the EmployeeQuery builder.
func (i *EmployeeWhereInput) Filter(q *EmployeeQuery) (*EmployeeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEmployeeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEmployeeWhereInput is returned in case the EmployeeWhereInput is empty.
var ErrEmptyEmployeeWhereInput = errors.New("ent: empty predicate EmployeeWhereInput")

// P returns a predicate for filtering employees.
// An error is returned if the input is empty or invalid.
func (i *EmployeeWhereInput) P() (predicate.Employee, error) {
	var predicates []predicate.Employee
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, employee.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Employee, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, employee.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Employee, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, employee.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, employee.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, employee.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, employee.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, employee.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, employee.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, employee.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, employee.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, employee.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, employee.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, employee.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, employee.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, employee.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, employee.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, employee.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, employee.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, employee.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, employee.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, employee.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, employee.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, employee.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, employee.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, employee.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, employee.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, employee.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, employee.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, employee.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, employee.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, employee.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, employee.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, employee.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, employee.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, employee.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, employee.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, employee.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, employee.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, employee.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, employee.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.FirstName != nil {
		predicates = append(predicates, employee.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, employee.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, employee.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, employee.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, employee.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, employee.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, employee.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, employee.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, employee.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, employee.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, employee.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameIsNil {
		predicates = append(predicates, employee.FirstNameIsNil())
	}
	if i.FirstNameNotNil {
		predicates = append(predicates, employee.FirstNameNotNil())
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, employee.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, employee.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, employee.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, employee.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, employee.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, employee.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, employee.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, employee.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, employee.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, employee.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, employee.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, employee.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, employee.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameIsNil {
		predicates = append(predicates, employee.LastNameIsNil())
	}
	if i.LastNameNotNil {
		predicates = append(predicates, employee.LastNameNotNil())
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, employee.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, employee.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.IsActive != nil {
		predicates = append(predicates, employee.IsActiveEQ(*i.IsActive))
	}
	if i.IsActiveNEQ != nil {
		predicates = append(predicates, employee.IsActiveNEQ(*i.IsActiveNEQ))
	}
	if i.IsActiveIsNil {
		predicates = append(predicates, employee.IsActiveIsNil())
	}
	if i.IsActiveNotNil {
		predicates = append(predicates, employee.IsActiveNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEmployeeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return employee.And(predicates...), nil
	}
}

// Employees is a parsable slice of Employee.
type Employees []*Employee

func (e Employees) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
