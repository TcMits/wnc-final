// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/employee"
	"github.com/TcMits/wnc-final/ent/predicate"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *EmployeeUpdate) SetUpdateTime(t time.Time) *EmployeeUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetJwtTokenKey sets the "jwt_token_key" field.
func (eu *EmployeeUpdate) SetJwtTokenKey(s string) *EmployeeUpdate {
	eu.mutation.SetJwtTokenKey(s)
	return eu
}

// SetNillableJwtTokenKey sets the "jwt_token_key" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableJwtTokenKey(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetJwtTokenKey(*s)
	}
	return eu
}

// ClearJwtTokenKey clears the value of the "jwt_token_key" field.
func (eu *EmployeeUpdate) ClearJwtTokenKey() *EmployeeUpdate {
	eu.mutation.ClearJwtTokenKey()
	return eu
}

// SetPassword sets the "password" field.
func (eu *EmployeeUpdate) SetPassword(s string) *EmployeeUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePassword(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPassword(*s)
	}
	return eu
}

// ClearPassword clears the value of the "password" field.
func (eu *EmployeeUpdate) ClearPassword() *EmployeeUpdate {
	eu.mutation.ClearPassword()
	return eu
}

// SetUsername sets the "username" field.
func (eu *EmployeeUpdate) SetUsername(s string) *EmployeeUpdate {
	eu.mutation.SetUsername(s)
	return eu
}

// SetFirstName sets the "first_name" field.
func (eu *EmployeeUpdate) SetFirstName(s string) *EmployeeUpdate {
	eu.mutation.SetFirstName(s)
	return eu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableFirstName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetFirstName(*s)
	}
	return eu
}

// ClearFirstName clears the value of the "first_name" field.
func (eu *EmployeeUpdate) ClearFirstName() *EmployeeUpdate {
	eu.mutation.ClearFirstName()
	return eu
}

// SetLastName sets the "last_name" field.
func (eu *EmployeeUpdate) SetLastName(s string) *EmployeeUpdate {
	eu.mutation.SetLastName(s)
	return eu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableLastName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetLastName(*s)
	}
	return eu
}

// ClearLastName clears the value of the "last_name" field.
func (eu *EmployeeUpdate) ClearLastName() *EmployeeUpdate {
	eu.mutation.ClearLastName()
	return eu
}

// SetIsActive sets the "is_active" field.
func (eu *EmployeeUpdate) SetIsActive(b bool) *EmployeeUpdate {
	eu.mutation.SetIsActive(b)
	return eu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableIsActive(b *bool) *EmployeeUpdate {
	if b != nil {
		eu.SetIsActive(*b)
	}
	return eu
}

// ClearIsActive clears the value of the "is_active" field.
func (eu *EmployeeUpdate) ClearIsActive() *EmployeeUpdate {
	eu.mutation.ClearIsActive()
	return eu
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := employee.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Employee.password": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Username(); ok {
		if err := employee.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Employee.username": %w`, err)}
		}
	}
	if v, ok := eu.mutation.FirstName(); ok {
		if err := employee.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Employee.first_name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.LastName(); ok {
		if err := employee.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Employee.last_name": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(employee.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.JwtTokenKey(); ok {
		_spec.SetField(employee.FieldJwtTokenKey, field.TypeString, value)
	}
	if eu.mutation.JwtTokenKeyCleared() {
		_spec.ClearField(employee.FieldJwtTokenKey, field.TypeString)
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.SetField(employee.FieldPassword, field.TypeString, value)
	}
	if eu.mutation.PasswordCleared() {
		_spec.ClearField(employee.FieldPassword, field.TypeString)
	}
	if value, ok := eu.mutation.Username(); ok {
		_spec.SetField(employee.FieldUsername, field.TypeString, value)
	}
	if value, ok := eu.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if eu.mutation.FirstNameCleared() {
		_spec.ClearField(employee.FieldFirstName, field.TypeString)
	}
	if value, ok := eu.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if eu.mutation.LastNameCleared() {
		_spec.ClearField(employee.FieldLastName, field.TypeString)
	}
	if value, ok := eu.mutation.IsActive(); ok {
		_spec.SetField(employee.FieldIsActive, field.TypeBool, value)
	}
	if eu.mutation.IsActiveCleared() {
		_spec.ClearField(employee.FieldIsActive, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetUpdateTime sets the "update_time" field.
func (euo *EmployeeUpdateOne) SetUpdateTime(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetJwtTokenKey sets the "jwt_token_key" field.
func (euo *EmployeeUpdateOne) SetJwtTokenKey(s string) *EmployeeUpdateOne {
	euo.mutation.SetJwtTokenKey(s)
	return euo
}

// SetNillableJwtTokenKey sets the "jwt_token_key" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableJwtTokenKey(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetJwtTokenKey(*s)
	}
	return euo
}

// ClearJwtTokenKey clears the value of the "jwt_token_key" field.
func (euo *EmployeeUpdateOne) ClearJwtTokenKey() *EmployeeUpdateOne {
	euo.mutation.ClearJwtTokenKey()
	return euo
}

// SetPassword sets the "password" field.
func (euo *EmployeeUpdateOne) SetPassword(s string) *EmployeeUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePassword(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPassword(*s)
	}
	return euo
}

// ClearPassword clears the value of the "password" field.
func (euo *EmployeeUpdateOne) ClearPassword() *EmployeeUpdateOne {
	euo.mutation.ClearPassword()
	return euo
}

// SetUsername sets the "username" field.
func (euo *EmployeeUpdateOne) SetUsername(s string) *EmployeeUpdateOne {
	euo.mutation.SetUsername(s)
	return euo
}

// SetFirstName sets the "first_name" field.
func (euo *EmployeeUpdateOne) SetFirstName(s string) *EmployeeUpdateOne {
	euo.mutation.SetFirstName(s)
	return euo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableFirstName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetFirstName(*s)
	}
	return euo
}

// ClearFirstName clears the value of the "first_name" field.
func (euo *EmployeeUpdateOne) ClearFirstName() *EmployeeUpdateOne {
	euo.mutation.ClearFirstName()
	return euo
}

// SetLastName sets the "last_name" field.
func (euo *EmployeeUpdateOne) SetLastName(s string) *EmployeeUpdateOne {
	euo.mutation.SetLastName(s)
	return euo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableLastName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetLastName(*s)
	}
	return euo
}

// ClearLastName clears the value of the "last_name" field.
func (euo *EmployeeUpdateOne) ClearLastName() *EmployeeUpdateOne {
	euo.mutation.ClearLastName()
	return euo
}

// SetIsActive sets the "is_active" field.
func (euo *EmployeeUpdateOne) SetIsActive(b bool) *EmployeeUpdateOne {
	euo.mutation.SetIsActive(b)
	return euo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableIsActive(b *bool) *EmployeeUpdateOne {
	if b != nil {
		euo.SetIsActive(*b)
	}
	return euo
}

// ClearIsActive clears the value of the "is_active" field.
func (euo *EmployeeUpdateOne) ClearIsActive() *EmployeeUpdateOne {
	euo.mutation.ClearIsActive()
	return euo
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	var (
		err  error
		node *Employee
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Employee)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EmployeeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := employee.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Employee.password": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Username(); ok {
		if err := employee.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Employee.username": %w`, err)}
		}
	}
	if v, ok := euo.mutation.FirstName(); ok {
		if err := employee.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Employee.first_name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.LastName(); ok {
		if err := employee.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Employee.last_name": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(employee.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.JwtTokenKey(); ok {
		_spec.SetField(employee.FieldJwtTokenKey, field.TypeString, value)
	}
	if euo.mutation.JwtTokenKeyCleared() {
		_spec.ClearField(employee.FieldJwtTokenKey, field.TypeString)
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.SetField(employee.FieldPassword, field.TypeString, value)
	}
	if euo.mutation.PasswordCleared() {
		_spec.ClearField(employee.FieldPassword, field.TypeString)
	}
	if value, ok := euo.mutation.Username(); ok {
		_spec.SetField(employee.FieldUsername, field.TypeString, value)
	}
	if value, ok := euo.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if euo.mutation.FirstNameCleared() {
		_spec.ClearField(employee.FieldFirstName, field.TypeString)
	}
	if value, ok := euo.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if euo.mutation.LastNameCleared() {
		_spec.ClearField(employee.FieldLastName, field.TypeString)
	}
	if value, ok := euo.mutation.IsActive(); ok {
		_spec.SetField(employee.FieldIsActive, field.TypeBool, value)
	}
	if euo.mutation.IsActiveCleared() {
		_spec.ClearField(employee.FieldIsActive, field.TypeBool)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
