// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/partner"
	"github.com/google/uuid"
)

// PartnerCreate is the builder for creating a Partner entity.
type PartnerCreate struct {
	config
	mutation *PartnerMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (pc *PartnerCreate) SetCreateTime(t time.Time) *PartnerCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableCreateTime(t *time.Time) *PartnerCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PartnerCreate) SetUpdateTime(t time.Time) *PartnerCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableUpdateTime(t *time.Time) *PartnerCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetAPIKey sets the "api_key" field.
func (pc *PartnerCreate) SetAPIKey(s string) *PartnerCreate {
	pc.mutation.SetAPIKey(s)
	return pc
}

// SetSecretKey sets the "secret_key" field.
func (pc *PartnerCreate) SetSecretKey(s string) *PartnerCreate {
	pc.mutation.SetSecretKey(s)
	return pc
}

// SetPublicKey sets the "public_key" field.
func (pc *PartnerCreate) SetPublicKey(s string) *PartnerCreate {
	pc.mutation.SetPublicKey(s)
	return pc
}

// SetPrivateKey sets the "private_key" field.
func (pc *PartnerCreate) SetPrivateKey(s string) *PartnerCreate {
	pc.mutation.SetPrivateKey(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PartnerCreate) SetName(s string) *PartnerCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableName(s *string) *PartnerCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetIsActive sets the "is_active" field.
func (pc *PartnerCreate) SetIsActive(b bool) *PartnerCreate {
	pc.mutation.SetIsActive(b)
	return pc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableIsActive(b *bool) *PartnerCreate {
	if b != nil {
		pc.SetIsActive(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PartnerCreate) SetID(u uuid.UUID) *PartnerCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PartnerCreate) SetNillableID(u *uuid.UUID) *PartnerCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PartnerMutation object of the builder.
func (pc *PartnerCreate) Mutation() *PartnerMutation {
	return pc.mutation
}

// Save creates the Partner in the database.
func (pc *PartnerCreate) Save(ctx context.Context) (*Partner, error) {
	var (
		err  error
		node *Partner
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Partner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PartnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartnerCreate) SaveX(ctx context.Context) *Partner {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartnerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartnerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PartnerCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := partner.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := partner.DefaultUpdateTime()
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := partner.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.IsActive(); !ok {
		v := partner.DefaultIsActive
		pc.mutation.SetIsActive(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := partner.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartnerCreate) check() error {
	if _, ok := pc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Partner.create_time"`)}
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Partner.update_time"`)}
	}
	if _, ok := pc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "Partner.api_key"`)}
	}
	if _, ok := pc.mutation.SecretKey(); !ok {
		return &ValidationError{Name: "secret_key", err: errors.New(`ent: missing required field "Partner.secret_key"`)}
	}
	if _, ok := pc.mutation.PublicKey(); !ok {
		return &ValidationError{Name: "public_key", err: errors.New(`ent: missing required field "Partner.public_key"`)}
	}
	if _, ok := pc.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "Partner.private_key"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	return nil
}

func (pc *PartnerCreate) sqlSave(ctx context.Context) (*Partner, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PartnerCreate) createSpec() (*Partner, *sqlgraph.CreateSpec) {
	var (
		_node = &Partner{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: partner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: partner.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(partner.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(partner.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.APIKey(); ok {
		_spec.SetField(partner.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := pc.mutation.SecretKey(); ok {
		_spec.SetField(partner.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = value
	}
	if value, ok := pc.mutation.PublicKey(); ok {
		_spec.SetField(partner.FieldPublicKey, field.TypeString, value)
		_node.PublicKey = value
	}
	if value, ok := pc.mutation.PrivateKey(); ok {
		_spec.SetField(partner.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.IsActive(); ok {
		_spec.SetField(partner.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	return _node, _spec
}

// PartnerCreateBulk is the builder for creating many Partner entities in bulk.
type PartnerCreateBulk struct {
	config
	builders []*PartnerCreate
}

// Save creates the Partner entities in the database.
func (pcb *PartnerCreateBulk) Save(ctx context.Context) ([]*Partner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Partner, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartnerCreateBulk) SaveX(ctx context.Context) []*Partner {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartnerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartnerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
