// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/partner"
	"github.com/TcMits/wnc-final/ent/predicate"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerMutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (pu *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PartnerUpdate) SetUpdateTime(t time.Time) *PartnerUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetAPIKey sets the "api_key" field.
func (pu *PartnerUpdate) SetAPIKey(s string) *PartnerUpdate {
	pu.mutation.SetAPIKey(s)
	return pu
}

// SetSecretKey sets the "secret_key" field.
func (pu *PartnerUpdate) SetSecretKey(s string) *PartnerUpdate {
	pu.mutation.SetSecretKey(s)
	return pu
}

// SetPublicKey sets the "public_key" field.
func (pu *PartnerUpdate) SetPublicKey(s string) *PartnerUpdate {
	pu.mutation.SetPublicKey(s)
	return pu
}

// SetPrivateKey sets the "private_key" field.
func (pu *PartnerUpdate) SetPrivateKey(s string) *PartnerUpdate {
	pu.mutation.SetPrivateKey(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PartnerUpdate) SetName(s string) *PartnerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableName(s *string) *PartnerUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PartnerUpdate) ClearName() *PartnerUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *PartnerUpdate) SetIsActive(b bool) *PartnerUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *PartnerUpdate) SetNillableIsActive(b *bool) *PartnerUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// ClearIsActive clears the value of the "is_active" field.
func (pu *PartnerUpdate) ClearIsActive() *PartnerUpdate {
	pu.mutation.ClearIsActive()
	return pu
}

// Mutation returns the PartnerMutation object of the builder.
func (pu *PartnerUpdate) Mutation() *PartnerMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartnerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartnerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PartnerUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := partner.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartnerUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PartnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partner.Table,
			Columns: partner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: partner.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(partner.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.APIKey(); ok {
		_spec.SetField(partner.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.SecretKey(); ok {
		_spec.SetField(partner.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.PublicKey(); ok {
		_spec.SetField(partner.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.PrivateKey(); ok {
		_spec.SetField(partner.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(partner.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(partner.FieldIsActive, field.TypeBool, value)
	}
	if pu.mutation.IsActiveCleared() {
		_spec.ClearField(partner.FieldIsActive, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PartnerUpdateOne) SetUpdateTime(t time.Time) *PartnerUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetAPIKey sets the "api_key" field.
func (puo *PartnerUpdateOne) SetAPIKey(s string) *PartnerUpdateOne {
	puo.mutation.SetAPIKey(s)
	return puo
}

// SetSecretKey sets the "secret_key" field.
func (puo *PartnerUpdateOne) SetSecretKey(s string) *PartnerUpdateOne {
	puo.mutation.SetSecretKey(s)
	return puo
}

// SetPublicKey sets the "public_key" field.
func (puo *PartnerUpdateOne) SetPublicKey(s string) *PartnerUpdateOne {
	puo.mutation.SetPublicKey(s)
	return puo
}

// SetPrivateKey sets the "private_key" field.
func (puo *PartnerUpdateOne) SetPrivateKey(s string) *PartnerUpdateOne {
	puo.mutation.SetPrivateKey(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PartnerUpdateOne) SetName(s string) *PartnerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableName(s *string) *PartnerUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PartnerUpdateOne) ClearName() *PartnerUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *PartnerUpdateOne) SetIsActive(b bool) *PartnerUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *PartnerUpdateOne) SetNillableIsActive(b *bool) *PartnerUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// ClearIsActive clears the value of the "is_active" field.
func (puo *PartnerUpdateOne) ClearIsActive() *PartnerUpdateOne {
	puo.mutation.ClearIsActive()
	return puo
}

// Mutation returns the PartnerMutation object of the builder.
func (puo *PartnerUpdateOne) Mutation() *PartnerMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Partner entity.
func (puo *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	var (
		err  error
		node *Partner
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Partner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PartnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PartnerUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := partner.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartnerUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := partner.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Partner.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partner.Table,
			Columns: partner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: partner.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(partner.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.APIKey(); ok {
		_spec.SetField(partner.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.SecretKey(); ok {
		_spec.SetField(partner.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.PublicKey(); ok {
		_spec.SetField(partner.FieldPublicKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.PrivateKey(); ok {
		_spec.SetField(partner.FieldPrivateKey, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(partner.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(partner.FieldIsActive, field.TypeBool, value)
	}
	if puo.mutation.IsActiveCleared() {
		_spec.ClearField(partner.FieldIsActive, field.TypeBool)
	}
	_node = &Partner{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
