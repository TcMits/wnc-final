// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldSourceTransactionID holds the string denoting the source_transaction_id field in the database.
	FieldSourceTransactionID = "source_transaction_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReceiverBankAccountNumber holds the string denoting the receiver_bank_account_number field in the database.
	FieldReceiverBankAccountNumber = "receiver_bank_account_number"
	// FieldReceiverBankName holds the string denoting the receiver_bank_name field in the database.
	FieldReceiverBankName = "receiver_bank_name"
	// FieldReceiverName holds the string denoting the receiver_name field in the database.
	FieldReceiverName = "receiver_name"
	// FieldReceiverID holds the string denoting the receiver_id field in the database.
	FieldReceiverID = "receiver_id"
	// FieldSenderBankAccountNumber holds the string denoting the sender_bank_account_number field in the database.
	FieldSenderBankAccountNumber = "sender_bank_account_number"
	// FieldSenderBankName holds the string denoting the sender_bank_name field in the database.
	FieldSenderBankName = "sender_bank_name"
	// FieldSenderName holds the string denoting the sender_name field in the database.
	FieldSenderName = "sender_name"
	// FieldSenderID holds the string denoting the sender_id field in the database.
	FieldSenderID = "sender_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTransactionType holds the string denoting the transaction_type field in the database.
	FieldTransactionType = "transaction_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeSourceTransaction holds the string denoting the source_transaction edge name in mutations.
	EdgeSourceTransaction = "source_transaction"
	// EdgeFeeTransaction holds the string denoting the fee_transaction edge name in mutations.
	EdgeFeeTransaction = "fee_transaction"
	// EdgeReceiver holds the string denoting the receiver edge name in mutations.
	EdgeReceiver = "receiver"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeDebt holds the string denoting the debt edge name in mutations.
	EdgeDebt = "debt"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// SourceTransactionTable is the table that holds the source_transaction relation/edge.
	SourceTransactionTable = "transactions"
	// SourceTransactionColumn is the table column denoting the source_transaction relation/edge.
	SourceTransactionColumn = "source_transaction_id"
	// FeeTransactionTable is the table that holds the fee_transaction relation/edge.
	FeeTransactionTable = "transactions"
	// FeeTransactionColumn is the table column denoting the fee_transaction relation/edge.
	FeeTransactionColumn = "source_transaction_id"
	// ReceiverTable is the table that holds the receiver relation/edge.
	ReceiverTable = "transactions"
	// ReceiverInverseTable is the table name for the BankAccount entity.
	// It exists in this package in order to avoid circular dependency with the "bankaccount" package.
	ReceiverInverseTable = "bank_accounts"
	// ReceiverColumn is the table column denoting the receiver relation/edge.
	ReceiverColumn = "receiver_id"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "transactions"
	// SenderInverseTable is the table name for the BankAccount entity.
	// It exists in this package in order to avoid circular dependency with the "bankaccount" package.
	SenderInverseTable = "bank_accounts"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "sender_id"
	// DebtTable is the table that holds the debt relation/edge.
	DebtTable = "debts"
	// DebtInverseTable is the table name for the Debt entity.
	// It exists in this package in order to avoid circular dependency with the "debt" package.
	DebtInverseTable = "debts"
	// DebtColumn is the table column denoting the debt relation/edge.
	DebtColumn = "transaction_id"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldSourceTransactionID,
	FieldStatus,
	FieldReceiverBankAccountNumber,
	FieldReceiverBankName,
	FieldReceiverName,
	FieldReceiverID,
	FieldSenderBankAccountNumber,
	FieldSenderBankName,
	FieldSenderName,
	FieldSenderID,
	FieldAmount,
	FieldTransactionType,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ReceiverBankAccountNumberValidator is a validator for the "receiver_bank_account_number" field. It is called by the builders before save.
	ReceiverBankAccountNumberValidator func(string) error
	// ReceiverBankNameValidator is a validator for the "receiver_bank_name" field. It is called by the builders before save.
	ReceiverBankNameValidator func(string) error
	// ReceiverNameValidator is a validator for the "receiver_name" field. It is called by the builders before save.
	ReceiverNameValidator func(string) error
	// SenderBankAccountNumberValidator is a validator for the "sender_bank_account_number" field. It is called by the builders before save.
	SenderBankAccountNumberValidator func(string) error
	// SenderBankNameValidator is a validator for the "sender_bank_name" field. It is called by the builders before save.
	SenderBankNameValidator func(string) error
	// SenderNameValidator is a validator for the "sender_name" field. It is called by the builders before save.
	SenderNameValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft    Status = "draft"
	StatusVerified Status = "verified"
	StatusSuccess  Status = "success"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusVerified, StatusSuccess:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for status field: %q", s)
	}
}

// TransactionType defines the type for the "transaction_type" enum field.
type TransactionType string

// TransactionType values.
const (
	TransactionTypeInternal TransactionType = "internal"
	TransactionTypeExternal TransactionType = "external"
)

func (tt TransactionType) String() string {
	return string(tt)
}

// TransactionTypeValidator is a validator for the "transaction_type" field enum values. It is called by the builders before save.
func TransactionTypeValidator(tt TransactionType) error {
	switch tt {
	case TransactionTypeInternal, TransactionTypeExternal:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for transaction_type field: %q", tt)
	}
}
