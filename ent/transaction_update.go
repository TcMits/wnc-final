// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TcMits/wnc-final/ent/bankaccount"
	"github.com/TcMits/wnc-final/ent/debt"
	"github.com/TcMits/wnc-final/ent/predicate"
	"github.com/TcMits/wnc-final/ent/transaction"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TransactionUpdate) SetUpdateTime(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetSourceTransactionID sets the "source_transaction_id" field.
func (tu *TransactionUpdate) SetSourceTransactionID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetSourceTransactionID(u)
	return tu
}

// SetNillableSourceTransactionID sets the "source_transaction_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSourceTransactionID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetSourceTransactionID(*u)
	}
	return tu
}

// ClearSourceTransactionID clears the value of the "source_transaction_id" field.
func (tu *TransactionUpdate) ClearSourceTransactionID() *TransactionUpdate {
	tu.mutation.ClearSourceTransactionID()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(t transaction.Status) *TransactionUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(t *transaction.Status) *TransactionUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetReceiverBankAccountNumber sets the "receiver_bank_account_number" field.
func (tu *TransactionUpdate) SetReceiverBankAccountNumber(s string) *TransactionUpdate {
	tu.mutation.SetReceiverBankAccountNumber(s)
	return tu
}

// SetReceiverBankName sets the "receiver_bank_name" field.
func (tu *TransactionUpdate) SetReceiverBankName(s string) *TransactionUpdate {
	tu.mutation.SetReceiverBankName(s)
	return tu
}

// SetReceiverName sets the "receiver_name" field.
func (tu *TransactionUpdate) SetReceiverName(s string) *TransactionUpdate {
	tu.mutation.SetReceiverName(s)
	return tu
}

// SetReceiverID sets the "receiver_id" field.
func (tu *TransactionUpdate) SetReceiverID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetReceiverID(u)
	return tu
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableReceiverID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetReceiverID(*u)
	}
	return tu
}

// ClearReceiverID clears the value of the "receiver_id" field.
func (tu *TransactionUpdate) ClearReceiverID() *TransactionUpdate {
	tu.mutation.ClearReceiverID()
	return tu
}

// SetSenderBankAccountNumber sets the "sender_bank_account_number" field.
func (tu *TransactionUpdate) SetSenderBankAccountNumber(s string) *TransactionUpdate {
	tu.mutation.SetSenderBankAccountNumber(s)
	return tu
}

// SetSenderBankName sets the "sender_bank_name" field.
func (tu *TransactionUpdate) SetSenderBankName(s string) *TransactionUpdate {
	tu.mutation.SetSenderBankName(s)
	return tu
}

// SetSenderName sets the "sender_name" field.
func (tu *TransactionUpdate) SetSenderName(s string) *TransactionUpdate {
	tu.mutation.SetSenderName(s)
	return tu
}

// SetSenderID sets the "sender_id" field.
func (tu *TransactionUpdate) SetSenderID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetSenderID(u)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(d decimal.Decimal) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(d)
	return tu
}

// AddAmount adds d to the "amount" field.
func (tu *TransactionUpdate) AddAmount(d decimal.Decimal) *TransactionUpdate {
	tu.mutation.AddAmount(d)
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(tt transaction.TransactionType) *TransactionUpdate {
	tu.mutation.SetTransactionType(tt)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TransactionUpdate) SetDescription(s string) *TransactionUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDescription(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TransactionUpdate) ClearDescription() *TransactionUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetSourceTransaction sets the "source_transaction" edge to the Transaction entity.
func (tu *TransactionUpdate) SetSourceTransaction(t *Transaction) *TransactionUpdate {
	return tu.SetSourceTransactionID(t.ID)
}

// SetFeeTransactionID sets the "fee_transaction" edge to the Transaction entity by ID.
func (tu *TransactionUpdate) SetFeeTransactionID(id uuid.UUID) *TransactionUpdate {
	tu.mutation.SetFeeTransactionID(id)
	return tu
}

// SetNillableFeeTransactionID sets the "fee_transaction" edge to the Transaction entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableFeeTransactionID(id *uuid.UUID) *TransactionUpdate {
	if id != nil {
		tu = tu.SetFeeTransactionID(*id)
	}
	return tu
}

// SetFeeTransaction sets the "fee_transaction" edge to the Transaction entity.
func (tu *TransactionUpdate) SetFeeTransaction(t *Transaction) *TransactionUpdate {
	return tu.SetFeeTransactionID(t.ID)
}

// SetReceiver sets the "receiver" edge to the BankAccount entity.
func (tu *TransactionUpdate) SetReceiver(b *BankAccount) *TransactionUpdate {
	return tu.SetReceiverID(b.ID)
}

// SetSender sets the "sender" edge to the BankAccount entity.
func (tu *TransactionUpdate) SetSender(b *BankAccount) *TransactionUpdate {
	return tu.SetSenderID(b.ID)
}

// SetDebtID sets the "debt" edge to the Debt entity by ID.
func (tu *TransactionUpdate) SetDebtID(id uuid.UUID) *TransactionUpdate {
	tu.mutation.SetDebtID(id)
	return tu
}

// SetNillableDebtID sets the "debt" edge to the Debt entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDebtID(id *uuid.UUID) *TransactionUpdate {
	if id != nil {
		tu = tu.SetDebtID(*id)
	}
	return tu
}

// SetDebt sets the "debt" edge to the Debt entity.
func (tu *TransactionUpdate) SetDebt(d *Debt) *TransactionUpdate {
	return tu.SetDebtID(d.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearSourceTransaction clears the "source_transaction" edge to the Transaction entity.
func (tu *TransactionUpdate) ClearSourceTransaction() *TransactionUpdate {
	tu.mutation.ClearSourceTransaction()
	return tu
}

// ClearFeeTransaction clears the "fee_transaction" edge to the Transaction entity.
func (tu *TransactionUpdate) ClearFeeTransaction() *TransactionUpdate {
	tu.mutation.ClearFeeTransaction()
	return tu
}

// ClearReceiver clears the "receiver" edge to the BankAccount entity.
func (tu *TransactionUpdate) ClearReceiver() *TransactionUpdate {
	tu.mutation.ClearReceiver()
	return tu
}

// ClearSender clears the "sender" edge to the BankAccount entity.
func (tu *TransactionUpdate) ClearSender() *TransactionUpdate {
	tu.mutation.ClearSender()
	return tu
}

// ClearDebt clears the "debt" edge to the Debt entity.
func (tu *TransactionUpdate) ClearDebt() *TransactionUpdate {
	tu.mutation.ClearDebt()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ReceiverBankAccountNumber(); ok {
		if err := transaction.ReceiverBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_bank_account_number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ReceiverBankName(); ok {
		if err := transaction.ReceiverBankNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_bank_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ReceiverName(); ok {
		if err := transaction.ReceiverNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SenderBankAccountNumber(); ok {
		if err := transaction.SenderBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "sender_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_bank_account_number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SenderBankName(); ok {
		if err := transaction.SenderBankNameValidator(v); err != nil {
			return &ValidationError{Name: "sender_bank_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_bank_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SenderName(); ok {
		if err := transaction.SenderNameValidator(v); err != nil {
			return &ValidationError{Name: "sender_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if _, ok := tu.mutation.SenderID(); tu.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.sender"`)
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(transaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.ReceiverBankAccountNumber(); ok {
		_spec.SetField(transaction.FieldReceiverBankAccountNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.ReceiverBankName(); ok {
		_spec.SetField(transaction.FieldReceiverBankName, field.TypeString, value)
	}
	if value, ok := tu.mutation.ReceiverName(); ok {
		_spec.SetField(transaction.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := tu.mutation.SenderBankAccountNumber(); ok {
		_spec.SetField(transaction.FieldSenderBankAccountNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.SenderBankName(); ok {
		_spec.SetField(transaction.FieldSenderBankName, field.TypeString, value)
	}
	if value, ok := tu.mutation.SenderName(); ok {
		_spec.SetField(transaction.FieldSenderName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if tu.mutation.SourceTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.SourceTransactionTable,
			Columns: []string{transaction.SourceTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SourceTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.SourceTransactionTable,
			Columns: []string{transaction.SourceTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FeeTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.FeeTransactionTable,
			Columns: []string{transaction.FeeTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FeeTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.FeeTransactionTable,
			Columns: []string{transaction.FeeTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.ReceiverTable,
			Columns: []string{transaction.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.ReceiverTable,
			Columns: []string{transaction.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.SenderTable,
			Columns: []string{transaction.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.SenderTable,
			Columns: []string{transaction.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DebtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.DebtTable,
			Columns: []string{transaction.DebtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DebtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.DebtTable,
			Columns: []string{transaction.DebtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TransactionUpdateOne) SetUpdateTime(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetSourceTransactionID sets the "source_transaction_id" field.
func (tuo *TransactionUpdateOne) SetSourceTransactionID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetSourceTransactionID(u)
	return tuo
}

// SetNillableSourceTransactionID sets the "source_transaction_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSourceTransactionID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetSourceTransactionID(*u)
	}
	return tuo
}

// ClearSourceTransactionID clears the value of the "source_transaction_id" field.
func (tuo *TransactionUpdateOne) ClearSourceTransactionID() *TransactionUpdateOne {
	tuo.mutation.ClearSourceTransactionID()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(t transaction.Status) *TransactionUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(t *transaction.Status) *TransactionUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetReceiverBankAccountNumber sets the "receiver_bank_account_number" field.
func (tuo *TransactionUpdateOne) SetReceiverBankAccountNumber(s string) *TransactionUpdateOne {
	tuo.mutation.SetReceiverBankAccountNumber(s)
	return tuo
}

// SetReceiverBankName sets the "receiver_bank_name" field.
func (tuo *TransactionUpdateOne) SetReceiverBankName(s string) *TransactionUpdateOne {
	tuo.mutation.SetReceiverBankName(s)
	return tuo
}

// SetReceiverName sets the "receiver_name" field.
func (tuo *TransactionUpdateOne) SetReceiverName(s string) *TransactionUpdateOne {
	tuo.mutation.SetReceiverName(s)
	return tuo
}

// SetReceiverID sets the "receiver_id" field.
func (tuo *TransactionUpdateOne) SetReceiverID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetReceiverID(u)
	return tuo
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableReceiverID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetReceiverID(*u)
	}
	return tuo
}

// ClearReceiverID clears the value of the "receiver_id" field.
func (tuo *TransactionUpdateOne) ClearReceiverID() *TransactionUpdateOne {
	tuo.mutation.ClearReceiverID()
	return tuo
}

// SetSenderBankAccountNumber sets the "sender_bank_account_number" field.
func (tuo *TransactionUpdateOne) SetSenderBankAccountNumber(s string) *TransactionUpdateOne {
	tuo.mutation.SetSenderBankAccountNumber(s)
	return tuo
}

// SetSenderBankName sets the "sender_bank_name" field.
func (tuo *TransactionUpdateOne) SetSenderBankName(s string) *TransactionUpdateOne {
	tuo.mutation.SetSenderBankName(s)
	return tuo
}

// SetSenderName sets the "sender_name" field.
func (tuo *TransactionUpdateOne) SetSenderName(s string) *TransactionUpdateOne {
	tuo.mutation.SetSenderName(s)
	return tuo
}

// SetSenderID sets the "sender_id" field.
func (tuo *TransactionUpdateOne) SetSenderID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetSenderID(u)
	return tuo
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(d decimal.Decimal) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(d)
	return tuo
}

// AddAmount adds d to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(d decimal.Decimal) *TransactionUpdateOne {
	tuo.mutation.AddAmount(d)
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(tt transaction.TransactionType) *TransactionUpdateOne {
	tuo.mutation.SetTransactionType(tt)
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TransactionUpdateOne) SetDescription(s string) *TransactionUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDescription(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TransactionUpdateOne) ClearDescription() *TransactionUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetSourceTransaction sets the "source_transaction" edge to the Transaction entity.
func (tuo *TransactionUpdateOne) SetSourceTransaction(t *Transaction) *TransactionUpdateOne {
	return tuo.SetSourceTransactionID(t.ID)
}

// SetFeeTransactionID sets the "fee_transaction" edge to the Transaction entity by ID.
func (tuo *TransactionUpdateOne) SetFeeTransactionID(id uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetFeeTransactionID(id)
	return tuo
}

// SetNillableFeeTransactionID sets the "fee_transaction" edge to the Transaction entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableFeeTransactionID(id *uuid.UUID) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetFeeTransactionID(*id)
	}
	return tuo
}

// SetFeeTransaction sets the "fee_transaction" edge to the Transaction entity.
func (tuo *TransactionUpdateOne) SetFeeTransaction(t *Transaction) *TransactionUpdateOne {
	return tuo.SetFeeTransactionID(t.ID)
}

// SetReceiver sets the "receiver" edge to the BankAccount entity.
func (tuo *TransactionUpdateOne) SetReceiver(b *BankAccount) *TransactionUpdateOne {
	return tuo.SetReceiverID(b.ID)
}

// SetSender sets the "sender" edge to the BankAccount entity.
func (tuo *TransactionUpdateOne) SetSender(b *BankAccount) *TransactionUpdateOne {
	return tuo.SetSenderID(b.ID)
}

// SetDebtID sets the "debt" edge to the Debt entity by ID.
func (tuo *TransactionUpdateOne) SetDebtID(id uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetDebtID(id)
	return tuo
}

// SetNillableDebtID sets the "debt" edge to the Debt entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDebtID(id *uuid.UUID) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetDebtID(*id)
	}
	return tuo
}

// SetDebt sets the "debt" edge to the Debt entity.
func (tuo *TransactionUpdateOne) SetDebt(d *Debt) *TransactionUpdateOne {
	return tuo.SetDebtID(d.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearSourceTransaction clears the "source_transaction" edge to the Transaction entity.
func (tuo *TransactionUpdateOne) ClearSourceTransaction() *TransactionUpdateOne {
	tuo.mutation.ClearSourceTransaction()
	return tuo
}

// ClearFeeTransaction clears the "fee_transaction" edge to the Transaction entity.
func (tuo *TransactionUpdateOne) ClearFeeTransaction() *TransactionUpdateOne {
	tuo.mutation.ClearFeeTransaction()
	return tuo
}

// ClearReceiver clears the "receiver" edge to the BankAccount entity.
func (tuo *TransactionUpdateOne) ClearReceiver() *TransactionUpdateOne {
	tuo.mutation.ClearReceiver()
	return tuo
}

// ClearSender clears the "sender" edge to the BankAccount entity.
func (tuo *TransactionUpdateOne) ClearSender() *TransactionUpdateOne {
	tuo.mutation.ClearSender()
	return tuo
}

// ClearDebt clears the "debt" edge to the Debt entity.
func (tuo *TransactionUpdateOne) ClearDebt() *TransactionUpdateOne {
	tuo.mutation.ClearDebt()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := transaction.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := transaction.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transaction.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ReceiverBankAccountNumber(); ok {
		if err := transaction.ReceiverBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_bank_account_number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ReceiverBankName(); ok {
		if err := transaction.ReceiverBankNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_bank_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_bank_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ReceiverName(); ok {
		if err := transaction.ReceiverNameValidator(v); err != nil {
			return &ValidationError{Name: "receiver_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.receiver_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SenderBankAccountNumber(); ok {
		if err := transaction.SenderBankAccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "sender_bank_account_number", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_bank_account_number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SenderBankName(); ok {
		if err := transaction.SenderBankNameValidator(v); err != nil {
			return &ValidationError{Name: "sender_bank_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_bank_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SenderName(); ok {
		if err := transaction.SenderNameValidator(v); err != nil {
			return &ValidationError{Name: "sender_name", err: fmt.Errorf(`ent: validator failed for field "Transaction.sender_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.SenderID(); tuo.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.sender"`)
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(transaction.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.ReceiverBankAccountNumber(); ok {
		_spec.SetField(transaction.FieldReceiverBankAccountNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ReceiverBankName(); ok {
		_spec.SetField(transaction.FieldReceiverBankName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ReceiverName(); ok {
		_spec.SetField(transaction.FieldReceiverName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SenderBankAccountNumber(); ok {
		_spec.SetField(transaction.FieldSenderBankAccountNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SenderBankName(); ok {
		_spec.SetField(transaction.FieldSenderBankName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SenderName(); ok {
		_spec.SetField(transaction.FieldSenderName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if tuo.mutation.SourceTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.SourceTransactionTable,
			Columns: []string{transaction.SourceTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SourceTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transaction.SourceTransactionTable,
			Columns: []string{transaction.SourceTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FeeTransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.FeeTransactionTable,
			Columns: []string{transaction.FeeTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FeeTransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.FeeTransactionTable,
			Columns: []string{transaction.FeeTransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ReceiverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.ReceiverTable,
			Columns: []string{transaction.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.ReceiverTable,
			Columns: []string{transaction.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.SenderTable,
			Columns: []string{transaction.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.SenderTable,
			Columns: []string{transaction.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DebtCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.DebtTable,
			Columns: []string{transaction.DebtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DebtIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.DebtTable,
			Columns: []string{transaction.DebtColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: debt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
